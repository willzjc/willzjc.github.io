/* Generated by Cython 0.27.3 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_27_3"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__turboparser
#define __PYX_HAVE_API__turboparser
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "../src/sequence/SequenceInstance.h"
#include "../src/morphological_tagger/MorphologicalInstance.h"
#include "../src/entity_recognizer/EntityInstance.h"
#include "../src/parser/DependencyInstance.h"
#include "../src/semantic_parser/SemanticInstance.h"
#include "../src/entity_recognizer/EntitySpan.h"
#include "../src/coreference_resolver/CoreferenceSentence.h"
#include "../src/coreference_resolver/CoreferenceDocument.h"
#include "../libturboparser/TurboParserInterface.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "turbo_parser.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_11turboparser_PTurboParser;
struct __pyx_obj_11turboparser_PSequenceInstance;
struct __pyx_obj_11turboparser_PMorphologicalInstance;
struct __pyx_obj_11turboparser_PEntityInstance;
struct __pyx_obj_11turboparser_PDependencyInstance;
struct __pyx_obj_11turboparser_PSemanticInstance;
struct __pyx_obj_11turboparser_PNamedSpan;
struct __pyx_obj_11turboparser_PEntitySpan;
struct __pyx_obj_11turboparser_PCoreferenceSentence;
struct __pyx_obj_11turboparser_PCoreferenceDocument;
struct __pyx_obj_11turboparser_PTurboTaggerWorker;
struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker;
struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker;
struct __pyx_obj_11turboparser_PTurboParserWorker;
struct __pyx_obj_11turboparser_PTurboSemanticParserWorker;
struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker;

/* "turbo_parser.pyx":137
 * # Wrap them into python extension types.
 * 
 * cdef class PTurboParser:             # <<<<<<<<<<<<<<
 *     cdef TurboParserInterface *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PTurboParser {
  PyObject_HEAD
  TurboParserInterface::TurboParserInterface *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":179
 *         return coreference_resolver
 * 
 * cdef class PSequenceInstance:             # <<<<<<<<<<<<<<
 *     cdef SequenceInstance *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PSequenceInstance {
  PyObject_HEAD
  SequenceInstance *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":197
 *         return self.thisptr.GetTag(i)
 * 
 * cdef class PMorphologicalInstance:             # <<<<<<<<<<<<<<
 *     cdef MorphologicalInstance *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PMorphologicalInstance {
  PyObject_HEAD
  MorphologicalInstance *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":216
 *         return self.thisptr.GetTag(i)
 * 
 * cdef class PEntityInstance:             # <<<<<<<<<<<<<<
 *     cdef EntityInstance *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PEntityInstance {
  PyObject_HEAD
  EntityInstance *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":235
 *         return self.thisptr.GetTag(i)
 * 
 * cdef class PDependencyInstance:             # <<<<<<<<<<<<<<
 *     cdef DependencyInstance *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PDependencyInstance {
  PyObject_HEAD
  DependencyInstance *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":259
 *         return self.thisptr.GetDependencyRelation(i)
 * 
 * cdef class PSemanticInstance:             # <<<<<<<<<<<<<<
 *     cdef SemanticInstance *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PSemanticInstance {
  PyObject_HEAD
  SemanticInstance *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":302
 *         return self.thisptr.GetArgumentIndex(k, l)
 * 
 * cdef class PNamedSpan:             # <<<<<<<<<<<<<<
 *     cdef NamedSpan *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PNamedSpan {
  PyObject_HEAD
  NamedSpan *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":323
 *         return self.thisptr.name()
 * 
 * cdef class PEntitySpan(PNamedSpan):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, start=-1, end=-1, name='', allocate=True):
 *         self.allocate = allocate
 */
struct __pyx_obj_11turboparser_PEntitySpan {
  struct __pyx_obj_11turboparser_PNamedSpan __pyx_base;
};


/* "turbo_parser.pyx":329
 *             self.thisptr = new EntitySpan(start, end, name)
 * 
 * cdef class PCoreferenceSentence:             # <<<<<<<<<<<<<<
 *     cdef CoreferenceSentence *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PCoreferenceSentence {
  PyObject_HEAD
  CoreferenceSentence *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":378
 *         return p_coreference_spans
 * 
 * cdef class PCoreferenceDocument:             # <<<<<<<<<<<<<<
 *     cdef CoreferenceDocument *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PCoreferenceDocument {
  PyObject_HEAD
  CoreferenceDocument *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":406
 *         return p_sentence
 * 
 * cdef class PTurboTaggerWorker:             # <<<<<<<<<<<<<<
 *     cdef TurboTaggerWorker *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PTurboTaggerWorker {
  PyObject_HEAD
  TurboParserInterface::TurboTaggerWorker *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":427
 *         self.thisptr.TagSentence((<PSequenceInstance>sequence_instance).thisptr)
 * 
 * cdef class PTurboMorphologicalTaggerWorker:             # <<<<<<<<<<<<<<
 *     cdef TurboMorphologicalTaggerWorker *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker {
  PyObject_HEAD
  TurboParserInterface::TurboMorphologicalTaggerWorker *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":449
 *             (<PMorphologicalInstance>sequence_instance).thisptr)
 * 
 * cdef class PTurboEntityRecognizerWorker:             # <<<<<<<<<<<<<<
 *     cdef TurboEntityRecognizerWorker *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker {
  PyObject_HEAD
  TurboParserInterface::TurboEntityRecognizerWorker *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":470
 *         self.thisptr.TagSentence((<PEntityInstance>entity_instance).thisptr)
 * 
 * cdef class PTurboParserWorker:             # <<<<<<<<<<<<<<
 *     cdef TurboParserWorker *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PTurboParserWorker {
  PyObject_HEAD
  TurboParserInterface::TurboParserWorker *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":492
 *             (<PDependencyInstance>dependency_instance).thisptr)
 * 
 * cdef class PTurboSemanticParserWorker:             # <<<<<<<<<<<<<<
 *     cdef TurboSemanticParserWorker *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PTurboSemanticParserWorker {
  PyObject_HEAD
  TurboParserInterface::TurboSemanticParserWorker *thisptr;
  bool allocate;
};


/* "turbo_parser.pyx":514
 *             (<PSemanticInstance>semantic_instance).thisptr)
 * 
 * cdef class PTurboCoreferenceResolverWorker:             # <<<<<<<<<<<<<<
 *     cdef TurboCoreferenceResolverWorker *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker {
  PyObject_HEAD
  TurboParserInterface::TurboCoreferenceResolverWorker *thisptr;
  bool allocate;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'turboparser' */
static PyTypeObject *__pyx_ptype_11turboparser_PTurboParser = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PSequenceInstance = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PMorphologicalInstance = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PEntityInstance = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PDependencyInstance = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PSemanticInstance = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PNamedSpan = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PEntitySpan = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PCoreferenceSentence = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PCoreferenceDocument = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PTurboTaggerWorker = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PTurboMorphologicalTaggerWorker = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PTurboEntityRecognizerWorker = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PTurboParserWorker = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PTurboSemanticParserWorker = 0;
static PyTypeObject *__pyx_ptype_11turboparser_PTurboCoreferenceResolverWorker = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *); /*proto*/
static std::vector<std::vector<std::string> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(PyObject *); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static std::vector<std::vector<int> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "turboparser"
extern int __pyx_module_is_main_turboparser;
int __pyx_module_is_main_turboparser = 0;

/* Implementation of 'turboparser' */
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_k[] = "k";
static const char __pyx_k_l[] = "l";
static const char __pyx_k__13[] = "";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_pdb[] = "pdb";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_cpos[] = "cpos";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_tags[] = "tags";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_feats[] = "feats";
static const char __pyx_k_forms[] = "forms";
static const char __pyx_k_heads[] = "heads";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_lemmas[] = "lemmas";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_deprels[] = "deprels";
static const char __pyx_k_allocate[] = "allocate";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_speakers[] = "speakers";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_file_test[] = "file_test";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_p_sentences[] = "p_sentences";
static const char __pyx_k_part_number[] = "part_number";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_argument_roles[] = "argument_roles";
static const char __pyx_k_p_entity_spans[] = "p_entity_spans";
static const char __pyx_k_file_prediction[] = "file_prediction";
static const char __pyx_k_predicate_names[] = "predicate_names";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_argument_indices[] = "argument_indices";
static const char __pyx_k_predicate_indices[] = "predicate_indices";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_p_constituent_spans[] = "p_constituent_spans";
static const char __pyx_k_p_coreference_spans[] = "p_coreference_spans";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s__13;
static PyObject *__pyx_n_s_allocate;
static PyObject *__pyx_n_s_argument_indices;
static PyObject *__pyx_n_s_argument_roles;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cpos;
static PyObject *__pyx_n_s_deprels;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_feats;
static PyObject *__pyx_n_s_file_prediction;
static PyObject *__pyx_n_s_file_test;
static PyObject *__pyx_n_s_forms;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_heads;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_lemmas;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_p_constituent_spans;
static PyObject *__pyx_n_s_p_coreference_spans;
static PyObject *__pyx_n_s_p_entity_spans;
static PyObject *__pyx_n_s_p_sentences;
static PyObject *__pyx_n_s_part_number;
static PyObject *__pyx_n_s_pdb;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_predicate_indices;
static PyObject *__pyx_n_s_predicate_names;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_speakers;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_tags;
static PyObject *__pyx_n_s_test;
static int __pyx_pf_11turboparser_12PTurboParser___cinit__(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_12PTurboParser_2__dealloc__(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_12PTurboParser_4create_tagger(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_12PTurboParser_6create_morphological_tagger(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_12PTurboParser_8create_entity_recognizer(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_12PTurboParser_10create_parser(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_12PTurboParser_12create_semantic_parser(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_12PTurboParser_14create_coreference_resolver(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_12PTurboParser_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_12PTurboParser_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_17PSequenceInstance___cinit__(struct __pyx_obj_11turboparser_PSequenceInstance *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_17PSequenceInstance_2__dealloc__(struct __pyx_obj_11turboparser_PSequenceInstance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_17PSequenceInstance_4initialize(struct __pyx_obj_11turboparser_PSequenceInstance *__pyx_v_self, std::vector<std::string>  __pyx_v_forms, std::vector<std::string>  __pyx_v_tags); /* proto */
static PyObject *__pyx_pf_11turboparser_17PSequenceInstance_6get_tag(struct __pyx_obj_11turboparser_PSequenceInstance *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_11turboparser_17PSequenceInstance_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PSequenceInstance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_17PSequenceInstance_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PSequenceInstance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_22PMorphologicalInstance___cinit__(struct __pyx_obj_11turboparser_PMorphologicalInstance *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_22PMorphologicalInstance_2__dealloc__(struct __pyx_obj_11turboparser_PMorphologicalInstance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_22PMorphologicalInstance_4initialize(struct __pyx_obj_11turboparser_PMorphologicalInstance *__pyx_v_self, std::vector<std::string>  __pyx_v_forms, std::vector<std::string>  __pyx_v_lemmas, std::vector<std::string>  __pyx_v_pos, std::vector<std::string>  __pyx_v_tags); /* proto */
static PyObject *__pyx_pf_11turboparser_22PMorphologicalInstance_6get_tag(struct __pyx_obj_11turboparser_PMorphologicalInstance *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_11turboparser_22PMorphologicalInstance_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PMorphologicalInstance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_22PMorphologicalInstance_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PMorphologicalInstance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_15PEntityInstance___cinit__(struct __pyx_obj_11turboparser_PEntityInstance *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_15PEntityInstance_2__dealloc__(struct __pyx_obj_11turboparser_PEntityInstance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_15PEntityInstance_4initialize(struct __pyx_obj_11turboparser_PEntityInstance *__pyx_v_self, std::vector<std::string>  __pyx_v_forms, std::vector<std::string>  __pyx_v_pos, std::vector<std::string>  __pyx_v_tags); /* proto */
static PyObject *__pyx_pf_11turboparser_15PEntityInstance_6get_tag(struct __pyx_obj_11turboparser_PEntityInstance *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_11turboparser_15PEntityInstance_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PEntityInstance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_15PEntityInstance_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PEntityInstance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_19PDependencyInstance___cinit__(struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_19PDependencyInstance_2__dealloc__(struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_19PDependencyInstance_4initialize(struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self, std::vector<std::string>  __pyx_v_forms, std::vector<std::string>  __pyx_v_lemmas, std::vector<std::string>  __pyx_v_cpos, std::vector<std::string>  __pyx_v_pos, std::vector<std::vector<std::string> >  __pyx_v_feats, std::vector<std::string>  __pyx_v_deprels, std::vector<int>  __pyx_v_heads); /* proto */
static PyObject *__pyx_pf_11turboparser_19PDependencyInstance_6get_head(struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_11turboparser_19PDependencyInstance_8get_dependency_relation(struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_11turboparser_19PDependencyInstance_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_19PDependencyInstance_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_17PSemanticInstance___cinit__(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_17PSemanticInstance_2__dealloc__(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_4initialize(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, std::string __pyx_v_name, std::vector<std::string>  __pyx_v_forms, std::vector<std::string>  __pyx_v_lemmas, std::vector<std::string>  __pyx_v_cpos, std::vector<std::string>  __pyx_v_pos, std::vector<std::vector<std::string> >  __pyx_v_feats, std::vector<std::string>  __pyx_v_deprels, std::vector<int>  __pyx_v_heads, std::vector<std::string>  __pyx_v_predicate_names, std::vector<int>  __pyx_v_predicate_indices, std::vector<std::vector<std::string> >  __pyx_v_argument_roles, std::vector<std::vector<int> >  __pyx_v_argument_indices); /* proto */
static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_6get_num_predicates(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_8get_predicate_name(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_10get_predicate_index(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_12get_num_arguments_predicate(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_14get_argument_role(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_l); /* proto */
static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_16get_argument_index(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_l); /* proto */
static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_10PNamedSpan___cinit__(struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self, PyObject *__pyx_v_start, PyObject *__pyx_v_end, PyObject *__pyx_v_name, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_10PNamedSpan_2__dealloc__(struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_10PNamedSpan_4start(struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_10PNamedSpan_6end(struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_10PNamedSpan_8name(struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_10PNamedSpan_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_10PNamedSpan_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_11PEntitySpan___cinit__(struct __pyx_obj_11turboparser_PEntitySpan *__pyx_v_self, PyObject *__pyx_v_start, PyObject *__pyx_v_end, PyObject *__pyx_v_name, PyObject *__pyx_v_allocate); /* proto */
static PyObject *__pyx_pf_11turboparser_11PEntitySpan_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PEntitySpan *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_11PEntitySpan_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PEntitySpan *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_20PCoreferenceSentence___cinit__(struct __pyx_obj_11turboparser_PCoreferenceSentence *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_20PCoreferenceSentence_2__dealloc__(struct __pyx_obj_11turboparser_PCoreferenceSentence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_20PCoreferenceSentence_4initialize(struct __pyx_obj_11turboparser_PCoreferenceSentence *__pyx_v_self, std::string __pyx_v_name, std::vector<std::string>  __pyx_v_forms, std::vector<std::string>  __pyx_v_lemmas, std::vector<std::string>  __pyx_v_cpos, std::vector<std::string>  __pyx_v_pos, std::vector<std::vector<std::string> >  __pyx_v_feats, std::vector<std::string>  __pyx_v_deprels, std::vector<int>  __pyx_v_heads, std::vector<std::string>  __pyx_v_predicate_names, std::vector<int>  __pyx_v_predicate_indices, std::vector<std::vector<std::string> >  __pyx_v_argument_roles, std::vector<std::vector<int> >  __pyx_v_argument_indices, std::vector<std::string>  __pyx_v_speakers, PyObject *__pyx_v_p_entity_spans, PyObject *__pyx_v_p_constituent_spans, PyObject *__pyx_v_p_coreference_spans); /* proto */
static PyObject *__pyx_pf_11turboparser_20PCoreferenceSentence_6get_coreference_spans(struct __pyx_obj_11turboparser_PCoreferenceSentence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_20PCoreferenceSentence_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PCoreferenceSentence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_20PCoreferenceSentence_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PCoreferenceSentence *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_20PCoreferenceDocument___cinit__(struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_20PCoreferenceDocument_2__dealloc__(struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_20PCoreferenceDocument_4initialize(struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self, std::string __pyx_v_name, int __pyx_v_part_number, PyObject *__pyx_v_p_sentences); /* proto */
static PyObject *__pyx_pf_11turboparser_20PCoreferenceDocument_6get_num_sentences(struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_20PCoreferenceDocument_8get_sentence(struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_11turboparser_20PCoreferenceDocument_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_20PCoreferenceDocument_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_18PTurboTaggerWorker___cinit__(struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_18PTurboTaggerWorker_2__dealloc__(struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_18PTurboTaggerWorker_4load_tagger_model(struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self, PyObject *__pyx_v_file_model); /* proto */
static PyObject *__pyx_pf_11turboparser_18PTurboTaggerWorker_6tag(struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self, PyObject *__pyx_v_file_test, PyObject *__pyx_v_file_prediction); /* proto */
static PyObject *__pyx_pf_11turboparser_18PTurboTaggerWorker_8tag_sentence(struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self, PyObject *__pyx_v_sequence_instance); /* proto */
static PyObject *__pyx_pf_11turboparser_18PTurboTaggerWorker_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_18PTurboTaggerWorker_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker___cinit__(struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_2__dealloc__(struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_4load_morphological_tagger_model(struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self, PyObject *__pyx_v_file_model); /* proto */
static PyObject *__pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_6tag(struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self, PyObject *__pyx_v_file_test, PyObject *__pyx_v_file_prediction); /* proto */
static PyObject *__pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_8tag_sentence(struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self, PyObject *__pyx_v_sequence_instance); /* proto */
static PyObject *__pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_28PTurboEntityRecognizerWorker___cinit__(struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_2__dealloc__(struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_4load_entity_recognizer_model(struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self, PyObject *__pyx_v_file_model); /* proto */
static PyObject *__pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_6tag(struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self, PyObject *__pyx_v_file_test, PyObject *__pyx_v_file_prediction); /* proto */
static PyObject *__pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_8tag_sentence(struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self, PyObject *__pyx_v_entity_instance); /* proto */
static PyObject *__pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_18PTurboParserWorker___cinit__(struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_18PTurboParserWorker_2__dealloc__(struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_18PTurboParserWorker_4load_parser_model(struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self, PyObject *__pyx_v_file_model); /* proto */
static PyObject *__pyx_pf_11turboparser_18PTurboParserWorker_6parse(struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self, PyObject *__pyx_v_file_test, PyObject *__pyx_v_file_prediction); /* proto */
static PyObject *__pyx_pf_11turboparser_18PTurboParserWorker_8parse_sentence(struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self, PyObject *__pyx_v_dependency_instance); /* proto */
static PyObject *__pyx_pf_11turboparser_18PTurboParserWorker_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_18PTurboParserWorker_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_26PTurboSemanticParserWorker___cinit__(struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_26PTurboSemanticParserWorker_2__dealloc__(struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_26PTurboSemanticParserWorker_4load_semantic_parser_model(struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self, PyObject *__pyx_v_file_model); /* proto */
static PyObject *__pyx_pf_11turboparser_26PTurboSemanticParserWorker_6parse_semantic_dependencies(struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self, PyObject *__pyx_v_file_test, PyObject *__pyx_v_file_prediction); /* proto */
static PyObject *__pyx_pf_11turboparser_26PTurboSemanticParserWorker_8parse_semantic_dependencies_from_sentence(struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self, PyObject *__pyx_v_semantic_instance); /* proto */
static PyObject *__pyx_pf_11turboparser_26PTurboSemanticParserWorker_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_26PTurboSemanticParserWorker_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker___cinit__(struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_2__dealloc__(struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_4load_coreference_resolver_model(struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self, PyObject *__pyx_v_file_model); /* proto */
static PyObject *__pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_6resolve_coreferences(struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self, PyObject *__pyx_v_file_test, PyObject *__pyx_v_file_prediction); /* proto */
static PyObject *__pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_8resolve_coreferences_from_document(struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self, PyObject *__pyx_v_coreference_document); /* proto */
static PyObject *__pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_11turboparser_PTurboParser(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PSequenceInstance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PMorphologicalInstance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PEntityInstance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PDependencyInstance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PSemanticInstance(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PNamedSpan(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PEntitySpan(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PCoreferenceSentence(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PCoreferenceDocument(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PTurboTaggerWorker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PTurboMorphologicalTaggerWorker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PTurboEntityRecognizerWorker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PTurboParserWorker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PTurboSemanticParserWorker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11turboparser_PTurboCoreferenceResolverWorker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;

/* "turbo_parser.pyx":140
 *     cdef TurboParserInterface *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_12PTurboParser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_12PTurboParser_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 140, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 140, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PTurboParser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_12PTurboParser___cinit__(((struct __pyx_obj_11turboparser_PTurboParser *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_12PTurboParser___cinit__(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":141
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new TurboParserInterface()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 141, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":142
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboParserInterface()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 142, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":143
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new TurboParserInterface()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new TurboParserInterface::TurboParserInterface();

    /* "turbo_parser.pyx":142
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboParserInterface()
 * 
 */
  }

  /* "turbo_parser.pyx":140
 *     cdef TurboParserInterface *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboParser.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":145
 *             self.thisptr = new TurboParserInterface()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_12PTurboParser_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_12PTurboParser_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_12PTurboParser_2__dealloc__(((struct __pyx_obj_11turboparser_PTurboParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_12PTurboParser_2__dealloc__(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":146
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":147
 *     def __dealloc__(self):
 *         if self.allocate:
 *           del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def create_tagger(self):
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":146
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":145
 *             self.thisptr = new TurboParserInterface()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":149
 *           del self.thisptr
 * 
 *     def create_tagger(self):             # <<<<<<<<<<<<<<
 *         tagger = PTurboTaggerWorker(allocate=False)
 *         tagger.thisptr = self.thisptr.CreateTagger()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_12PTurboParser_5create_tagger(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_12PTurboParser_5create_tagger(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_tagger (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_12PTurboParser_4create_tagger(((struct __pyx_obj_11turboparser_PTurboParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_12PTurboParser_4create_tagger(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self) {
  struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_tagger = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("create_tagger", 0);

  /* "turbo_parser.pyx":150
 * 
 *     def create_tagger(self):
 *         tagger = PTurboTaggerWorker(allocate=False)             # <<<<<<<<<<<<<<
 *         tagger.thisptr = self.thisptr.CreateTagger()
 *         return tagger
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate, Py_False) < 0) __PYX_ERR(1, 150, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_11turboparser_PTurboTaggerWorker), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_tagger = ((struct __pyx_obj_11turboparser_PTurboTaggerWorker *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "turbo_parser.pyx":151
 *     def create_tagger(self):
 *         tagger = PTurboTaggerWorker(allocate=False)
 *         tagger.thisptr = self.thisptr.CreateTagger()             # <<<<<<<<<<<<<<
 *         return tagger
 * 
 */
  __pyx_v_tagger->thisptr = __pyx_v_self->thisptr->CreateTagger();

  /* "turbo_parser.pyx":152
 *         tagger = PTurboTaggerWorker(allocate=False)
 *         tagger.thisptr = self.thisptr.CreateTagger()
 *         return tagger             # <<<<<<<<<<<<<<
 * 
 *     def create_morphological_tagger(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_tagger));
  __pyx_r = ((PyObject *)__pyx_v_tagger);
  goto __pyx_L0;

  /* "turbo_parser.pyx":149
 *           del self.thisptr
 * 
 *     def create_tagger(self):             # <<<<<<<<<<<<<<
 *         tagger = PTurboTaggerWorker(allocate=False)
 *         tagger.thisptr = self.thisptr.CreateTagger()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PTurboParser.create_tagger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tagger);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":154
 *         return tagger
 * 
 *     def create_morphological_tagger(self):             # <<<<<<<<<<<<<<
 *         morphological_tagger = PTurboMorphologicalTaggerWorker(allocate=False)
 *         morphological_tagger.thisptr = self.thisptr.CreateMorphologicalTagger()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_12PTurboParser_7create_morphological_tagger(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_12PTurboParser_7create_morphological_tagger(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_morphological_tagger (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_12PTurboParser_6create_morphological_tagger(((struct __pyx_obj_11turboparser_PTurboParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_12PTurboParser_6create_morphological_tagger(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self) {
  struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_morphological_tagger = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("create_morphological_tagger", 0);

  /* "turbo_parser.pyx":155
 * 
 *     def create_morphological_tagger(self):
 *         morphological_tagger = PTurboMorphologicalTaggerWorker(allocate=False)             # <<<<<<<<<<<<<<
 *         morphological_tagger.thisptr = self.thisptr.CreateMorphologicalTagger()
 *         return morphological_tagger
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate, Py_False) < 0) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_11turboparser_PTurboMorphologicalTaggerWorker), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_morphological_tagger = ((struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "turbo_parser.pyx":156
 *     def create_morphological_tagger(self):
 *         morphological_tagger = PTurboMorphologicalTaggerWorker(allocate=False)
 *         morphological_tagger.thisptr = self.thisptr.CreateMorphologicalTagger()             # <<<<<<<<<<<<<<
 *         return morphological_tagger
 * 
 */
  __pyx_v_morphological_tagger->thisptr = __pyx_v_self->thisptr->CreateMorphologicalTagger();

  /* "turbo_parser.pyx":157
 *         morphological_tagger = PTurboMorphologicalTaggerWorker(allocate=False)
 *         morphological_tagger.thisptr = self.thisptr.CreateMorphologicalTagger()
 *         return morphological_tagger             # <<<<<<<<<<<<<<
 * 
 *     def create_entity_recognizer(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_morphological_tagger));
  __pyx_r = ((PyObject *)__pyx_v_morphological_tagger);
  goto __pyx_L0;

  /* "turbo_parser.pyx":154
 *         return tagger
 * 
 *     def create_morphological_tagger(self):             # <<<<<<<<<<<<<<
 *         morphological_tagger = PTurboMorphologicalTaggerWorker(allocate=False)
 *         morphological_tagger.thisptr = self.thisptr.CreateMorphologicalTagger()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PTurboParser.create_morphological_tagger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_morphological_tagger);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":159
 *         return morphological_tagger
 * 
 *     def create_entity_recognizer(self):             # <<<<<<<<<<<<<<
 *         entity_recognizer = PTurboEntityRecognizerWorker(allocate=False)
 *         entity_recognizer.thisptr = self.thisptr.CreateEntityRecognizer()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_12PTurboParser_9create_entity_recognizer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_12PTurboParser_9create_entity_recognizer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_entity_recognizer (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_12PTurboParser_8create_entity_recognizer(((struct __pyx_obj_11turboparser_PTurboParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_12PTurboParser_8create_entity_recognizer(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self) {
  struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_entity_recognizer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("create_entity_recognizer", 0);

  /* "turbo_parser.pyx":160
 * 
 *     def create_entity_recognizer(self):
 *         entity_recognizer = PTurboEntityRecognizerWorker(allocate=False)             # <<<<<<<<<<<<<<
 *         entity_recognizer.thisptr = self.thisptr.CreateEntityRecognizer()
 *         return entity_recognizer
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate, Py_False) < 0) __PYX_ERR(1, 160, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_11turboparser_PTurboEntityRecognizerWorker), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_entity_recognizer = ((struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "turbo_parser.pyx":161
 *     def create_entity_recognizer(self):
 *         entity_recognizer = PTurboEntityRecognizerWorker(allocate=False)
 *         entity_recognizer.thisptr = self.thisptr.CreateEntityRecognizer()             # <<<<<<<<<<<<<<
 *         return entity_recognizer
 * 
 */
  __pyx_v_entity_recognizer->thisptr = __pyx_v_self->thisptr->CreateEntityRecognizer();

  /* "turbo_parser.pyx":162
 *         entity_recognizer = PTurboEntityRecognizerWorker(allocate=False)
 *         entity_recognizer.thisptr = self.thisptr.CreateEntityRecognizer()
 *         return entity_recognizer             # <<<<<<<<<<<<<<
 * 
 *     def create_parser(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_entity_recognizer));
  __pyx_r = ((PyObject *)__pyx_v_entity_recognizer);
  goto __pyx_L0;

  /* "turbo_parser.pyx":159
 *         return morphological_tagger
 * 
 *     def create_entity_recognizer(self):             # <<<<<<<<<<<<<<
 *         entity_recognizer = PTurboEntityRecognizerWorker(allocate=False)
 *         entity_recognizer.thisptr = self.thisptr.CreateEntityRecognizer()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PTurboParser.create_entity_recognizer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_entity_recognizer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":164
 *         return entity_recognizer
 * 
 *     def create_parser(self):             # <<<<<<<<<<<<<<
 *         parser = PTurboParserWorker(allocate=False)
 *         parser.thisptr = self.thisptr.CreateParser()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_12PTurboParser_11create_parser(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_12PTurboParser_11create_parser(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_parser (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_12PTurboParser_10create_parser(((struct __pyx_obj_11turboparser_PTurboParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_12PTurboParser_10create_parser(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self) {
  struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_parser = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("create_parser", 0);

  /* "turbo_parser.pyx":165
 * 
 *     def create_parser(self):
 *         parser = PTurboParserWorker(allocate=False)             # <<<<<<<<<<<<<<
 *         parser.thisptr = self.thisptr.CreateParser()
 *         return parser
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate, Py_False) < 0) __PYX_ERR(1, 165, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_11turboparser_PTurboParserWorker), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_parser = ((struct __pyx_obj_11turboparser_PTurboParserWorker *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "turbo_parser.pyx":166
 *     def create_parser(self):
 *         parser = PTurboParserWorker(allocate=False)
 *         parser.thisptr = self.thisptr.CreateParser()             # <<<<<<<<<<<<<<
 *         return parser
 * 
 */
  __pyx_v_parser->thisptr = __pyx_v_self->thisptr->CreateParser();

  /* "turbo_parser.pyx":167
 *         parser = PTurboParserWorker(allocate=False)
 *         parser.thisptr = self.thisptr.CreateParser()
 *         return parser             # <<<<<<<<<<<<<<
 * 
 *     def create_semantic_parser(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_parser));
  __pyx_r = ((PyObject *)__pyx_v_parser);
  goto __pyx_L0;

  /* "turbo_parser.pyx":164
 *         return entity_recognizer
 * 
 *     def create_parser(self):             # <<<<<<<<<<<<<<
 *         parser = PTurboParserWorker(allocate=False)
 *         parser.thisptr = self.thisptr.CreateParser()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PTurboParser.create_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_parser);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":169
 *         return parser
 * 
 *     def create_semantic_parser(self):             # <<<<<<<<<<<<<<
 *         semantic_parser = PTurboSemanticParserWorker(allocate=False)
 *         semantic_parser.thisptr = self.thisptr.CreateSemanticParser()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_12PTurboParser_13create_semantic_parser(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_12PTurboParser_13create_semantic_parser(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_semantic_parser (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_12PTurboParser_12create_semantic_parser(((struct __pyx_obj_11turboparser_PTurboParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_12PTurboParser_12create_semantic_parser(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self) {
  struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_semantic_parser = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("create_semantic_parser", 0);

  /* "turbo_parser.pyx":170
 * 
 *     def create_semantic_parser(self):
 *         semantic_parser = PTurboSemanticParserWorker(allocate=False)             # <<<<<<<<<<<<<<
 *         semantic_parser.thisptr = self.thisptr.CreateSemanticParser()
 *         return semantic_parser
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate, Py_False) < 0) __PYX_ERR(1, 170, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_11turboparser_PTurboSemanticParserWorker), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_semantic_parser = ((struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "turbo_parser.pyx":171
 *     def create_semantic_parser(self):
 *         semantic_parser = PTurboSemanticParserWorker(allocate=False)
 *         semantic_parser.thisptr = self.thisptr.CreateSemanticParser()             # <<<<<<<<<<<<<<
 *         return semantic_parser
 * 
 */
  __pyx_v_semantic_parser->thisptr = __pyx_v_self->thisptr->CreateSemanticParser();

  /* "turbo_parser.pyx":172
 *         semantic_parser = PTurboSemanticParserWorker(allocate=False)
 *         semantic_parser.thisptr = self.thisptr.CreateSemanticParser()
 *         return semantic_parser             # <<<<<<<<<<<<<<
 * 
 *     def create_coreference_resolver(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_semantic_parser));
  __pyx_r = ((PyObject *)__pyx_v_semantic_parser);
  goto __pyx_L0;

  /* "turbo_parser.pyx":169
 *         return parser
 * 
 *     def create_semantic_parser(self):             # <<<<<<<<<<<<<<
 *         semantic_parser = PTurboSemanticParserWorker(allocate=False)
 *         semantic_parser.thisptr = self.thisptr.CreateSemanticParser()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PTurboParser.create_semantic_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_semantic_parser);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":174
 *         return semantic_parser
 * 
 *     def create_coreference_resolver(self):             # <<<<<<<<<<<<<<
 *         coreference_resolver = PTurboCoreferenceResolverWorker(allocate=False)
 *         coreference_resolver.thisptr = self.thisptr.CreateCoreferenceResolver()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_12PTurboParser_15create_coreference_resolver(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_12PTurboParser_15create_coreference_resolver(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_coreference_resolver (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_12PTurboParser_14create_coreference_resolver(((struct __pyx_obj_11turboparser_PTurboParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_12PTurboParser_14create_coreference_resolver(struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self) {
  struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_coreference_resolver = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("create_coreference_resolver", 0);

  /* "turbo_parser.pyx":175
 * 
 *     def create_coreference_resolver(self):
 *         coreference_resolver = PTurboCoreferenceResolverWorker(allocate=False)             # <<<<<<<<<<<<<<
 *         coreference_resolver.thisptr = self.thisptr.CreateCoreferenceResolver()
 *         return coreference_resolver
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate, Py_False) < 0) __PYX_ERR(1, 175, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_11turboparser_PTurboCoreferenceResolverWorker), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_coreference_resolver = ((struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "turbo_parser.pyx":176
 *     def create_coreference_resolver(self):
 *         coreference_resolver = PTurboCoreferenceResolverWorker(allocate=False)
 *         coreference_resolver.thisptr = self.thisptr.CreateCoreferenceResolver()             # <<<<<<<<<<<<<<
 *         return coreference_resolver
 * 
 */
  __pyx_v_coreference_resolver->thisptr = __pyx_v_self->thisptr->CreateCoreferenceResolver();

  /* "turbo_parser.pyx":177
 *         coreference_resolver = PTurboCoreferenceResolverWorker(allocate=False)
 *         coreference_resolver.thisptr = self.thisptr.CreateCoreferenceResolver()
 *         return coreference_resolver             # <<<<<<<<<<<<<<
 * 
 * cdef class PSequenceInstance:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_coreference_resolver));
  __pyx_r = ((PyObject *)__pyx_v_coreference_resolver);
  goto __pyx_L0;

  /* "turbo_parser.pyx":174
 *         return semantic_parser
 * 
 *     def create_coreference_resolver(self):             # <<<<<<<<<<<<<<
 *         coreference_resolver = PTurboCoreferenceResolverWorker(allocate=False)
 *         coreference_resolver.thisptr = self.thisptr.CreateCoreferenceResolver()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PTurboParser.create_coreference_resolver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_coreference_resolver);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_12PTurboParser_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_12PTurboParser_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_12PTurboParser_16__reduce_cython__(((struct __pyx_obj_11turboparser_PTurboParser *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_12PTurboParser_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboParser.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_12PTurboParser_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_12PTurboParser_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_12PTurboParser_18__setstate_cython__(((struct __pyx_obj_11turboparser_PTurboParser *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_12PTurboParser_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboParser *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboParser.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":182
 *     cdef SequenceInstance *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_17PSequenceInstance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_17PSequenceInstance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 182, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 182, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PSequenceInstance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_17PSequenceInstance___cinit__(((struct __pyx_obj_11turboparser_PSequenceInstance *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_17PSequenceInstance___cinit__(struct __pyx_obj_11turboparser_PSequenceInstance *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":183
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new SequenceInstance()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 183, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":184
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new SequenceInstance()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 184, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":185
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new SequenceInstance()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new SequenceInstance();

    /* "turbo_parser.pyx":184
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new SequenceInstance()
 * 
 */
  }

  /* "turbo_parser.pyx":182
 *     cdef SequenceInstance *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PSequenceInstance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":187
 *             self.thisptr = new SequenceInstance()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_17PSequenceInstance_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_17PSequenceInstance_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_17PSequenceInstance_2__dealloc__(((struct __pyx_obj_11turboparser_PSequenceInstance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_17PSequenceInstance_2__dealloc__(struct __pyx_obj_11turboparser_PSequenceInstance *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":188
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":189
 *     def __dealloc__(self):
 *         if self.allocate:
 *           del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, vector[string] forms, vector[string] tags):
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":188
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":187
 *             self.thisptr = new SequenceInstance()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":191
 *           del self.thisptr
 * 
 *     def initialize(self, vector[string] forms, vector[string] tags):             # <<<<<<<<<<<<<<
 *         self.thisptr.Initialize(forms, tags)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_17PSequenceInstance_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_17PSequenceInstance_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<std::string>  __pyx_v_forms;
  std::vector<std::string>  __pyx_v_tags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_forms,&__pyx_n_s_tags,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forms)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 2, 2, 1); __PYX_ERR(1, 191, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(1, 191, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_forms = __pyx_convert_vector_from_py_std_3a__3a_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 191, __pyx_L3_error)
    __pyx_v_tags = __pyx_convert_vector_from_py_std_3a__3a_string(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 191, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 191, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PSequenceInstance.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_17PSequenceInstance_4initialize(((struct __pyx_obj_11turboparser_PSequenceInstance *)__pyx_v_self), __pyx_v_forms, __pyx_v_tags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_17PSequenceInstance_4initialize(struct __pyx_obj_11turboparser_PSequenceInstance *__pyx_v_self, std::vector<std::string>  __pyx_v_forms, std::vector<std::string>  __pyx_v_tags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "turbo_parser.pyx":192
 * 
 *     def initialize(self, vector[string] forms, vector[string] tags):
 *         self.thisptr.Initialize(forms, tags)             # <<<<<<<<<<<<<<
 * 
 *     def get_tag(self, i):
 */
  __pyx_v_self->thisptr->Initialize(__pyx_v_forms, __pyx_v_tags);

  /* "turbo_parser.pyx":191
 *           del self.thisptr
 * 
 *     def initialize(self, vector[string] forms, vector[string] tags):             # <<<<<<<<<<<<<<
 *         self.thisptr.Initialize(forms, tags)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":194
 *         self.thisptr.Initialize(forms, tags)
 * 
 *     def get_tag(self, i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetTag(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_17PSequenceInstance_7get_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_11turboparser_17PSequenceInstance_7get_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tag (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_17PSequenceInstance_6get_tag(((struct __pyx_obj_11turboparser_PSequenceInstance *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_17PSequenceInstance_6get_tag(struct __pyx_obj_11turboparser_PSequenceInstance *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_tag", 0);

  /* "turbo_parser.pyx":195
 * 
 *     def get_tag(self, i):
 *         return self.thisptr.GetTag(i)             # <<<<<<<<<<<<<<
 * 
 * cdef class PMorphologicalInstance:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 195, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetTag(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":194
 *         self.thisptr.Initialize(forms, tags)
 * 
 *     def get_tag(self, i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetTag(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PSequenceInstance.get_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_17PSequenceInstance_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_17PSequenceInstance_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_17PSequenceInstance_8__reduce_cython__(((struct __pyx_obj_11turboparser_PSequenceInstance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_17PSequenceInstance_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PSequenceInstance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PSequenceInstance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_17PSequenceInstance_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_17PSequenceInstance_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_17PSequenceInstance_10__setstate_cython__(((struct __pyx_obj_11turboparser_PSequenceInstance *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_17PSequenceInstance_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PSequenceInstance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PSequenceInstance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":200
 *     cdef MorphologicalInstance *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_22PMorphologicalInstance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_22PMorphologicalInstance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 200, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 200, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PMorphologicalInstance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_22PMorphologicalInstance___cinit__(((struct __pyx_obj_11turboparser_PMorphologicalInstance *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_22PMorphologicalInstance___cinit__(struct __pyx_obj_11turboparser_PMorphologicalInstance *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":201
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new MorphologicalInstance()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 201, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":202
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new MorphologicalInstance()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 202, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":203
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new MorphologicalInstance()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new MorphologicalInstance();

    /* "turbo_parser.pyx":202
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new MorphologicalInstance()
 * 
 */
  }

  /* "turbo_parser.pyx":200
 *     cdef MorphologicalInstance *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PMorphologicalInstance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":205
 *             self.thisptr = new MorphologicalInstance()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_22PMorphologicalInstance_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_22PMorphologicalInstance_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_22PMorphologicalInstance_2__dealloc__(((struct __pyx_obj_11turboparser_PMorphologicalInstance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_22PMorphologicalInstance_2__dealloc__(struct __pyx_obj_11turboparser_PMorphologicalInstance *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":206
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":207
 *     def __dealloc__(self):
 *         if self.allocate:
 *           del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, vector[string] forms, vector[string] lemmas, \
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":206
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":205
 *             self.thisptr = new MorphologicalInstance()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":209
 *           del self.thisptr
 * 
 *     def initialize(self, vector[string] forms, vector[string] lemmas, \             # <<<<<<<<<<<<<<
 *                    vector[string] pos, vector[string] tags):
 *         self.thisptr.Initialize(forms, lemmas, pos, tags)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_22PMorphologicalInstance_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_22PMorphologicalInstance_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<std::string>  __pyx_v_forms;
  std::vector<std::string>  __pyx_v_lemmas;
  std::vector<std::string>  __pyx_v_pos;
  std::vector<std::string>  __pyx_v_tags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_forms,&__pyx_n_s_lemmas,&__pyx_n_s_pos,&__pyx_n_s_tags,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forms)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lemmas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 4, 4, 1); __PYX_ERR(1, 209, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 4, 4, 2); __PYX_ERR(1, 209, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 4, 4, 3); __PYX_ERR(1, 209, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(1, 209, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_forms = __pyx_convert_vector_from_py_std_3a__3a_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 209, __pyx_L3_error)
    __pyx_v_lemmas = __pyx_convert_vector_from_py_std_3a__3a_string(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 209, __pyx_L3_error)
    __pyx_v_pos = __pyx_convert_vector_from_py_std_3a__3a_string(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 210, __pyx_L3_error)
    __pyx_v_tags = __pyx_convert_vector_from_py_std_3a__3a_string(values[3]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 210, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 209, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PMorphologicalInstance.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_22PMorphologicalInstance_4initialize(((struct __pyx_obj_11turboparser_PMorphologicalInstance *)__pyx_v_self), __pyx_v_forms, __pyx_v_lemmas, __pyx_v_pos, __pyx_v_tags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_22PMorphologicalInstance_4initialize(struct __pyx_obj_11turboparser_PMorphologicalInstance *__pyx_v_self, std::vector<std::string>  __pyx_v_forms, std::vector<std::string>  __pyx_v_lemmas, std::vector<std::string>  __pyx_v_pos, std::vector<std::string>  __pyx_v_tags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "turbo_parser.pyx":211
 *     def initialize(self, vector[string] forms, vector[string] lemmas, \
 *                    vector[string] pos, vector[string] tags):
 *         self.thisptr.Initialize(forms, lemmas, pos, tags)             # <<<<<<<<<<<<<<
 * 
 *     def get_tag(self, i):
 */
  __pyx_v_self->thisptr->Initialize(__pyx_v_forms, __pyx_v_lemmas, __pyx_v_pos, __pyx_v_tags);

  /* "turbo_parser.pyx":209
 *           del self.thisptr
 * 
 *     def initialize(self, vector[string] forms, vector[string] lemmas, \             # <<<<<<<<<<<<<<
 *                    vector[string] pos, vector[string] tags):
 *         self.thisptr.Initialize(forms, lemmas, pos, tags)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":213
 *         self.thisptr.Initialize(forms, lemmas, pos, tags)
 * 
 *     def get_tag(self, i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetTag(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_22PMorphologicalInstance_7get_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_11turboparser_22PMorphologicalInstance_7get_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tag (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_22PMorphologicalInstance_6get_tag(((struct __pyx_obj_11turboparser_PMorphologicalInstance *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_22PMorphologicalInstance_6get_tag(struct __pyx_obj_11turboparser_PMorphologicalInstance *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_tag", 0);

  /* "turbo_parser.pyx":214
 * 
 *     def get_tag(self, i):
 *         return self.thisptr.GetTag(i)             # <<<<<<<<<<<<<<
 * 
 * cdef class PEntityInstance:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 214, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetTag(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":213
 *         self.thisptr.Initialize(forms, lemmas, pos, tags)
 * 
 *     def get_tag(self, i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetTag(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PMorphologicalInstance.get_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_22PMorphologicalInstance_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_22PMorphologicalInstance_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_22PMorphologicalInstance_8__reduce_cython__(((struct __pyx_obj_11turboparser_PMorphologicalInstance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_22PMorphologicalInstance_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PMorphologicalInstance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PMorphologicalInstance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_22PMorphologicalInstance_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_22PMorphologicalInstance_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_22PMorphologicalInstance_10__setstate_cython__(((struct __pyx_obj_11turboparser_PMorphologicalInstance *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_22PMorphologicalInstance_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PMorphologicalInstance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PMorphologicalInstance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":219
 *     cdef EntityInstance *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_15PEntityInstance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_15PEntityInstance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 219, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 219, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PEntityInstance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_15PEntityInstance___cinit__(((struct __pyx_obj_11turboparser_PEntityInstance *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_15PEntityInstance___cinit__(struct __pyx_obj_11turboparser_PEntityInstance *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":220
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new EntityInstance()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 220, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":221
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new EntityInstance()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 221, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":222
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new EntityInstance()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new EntityInstance();

    /* "turbo_parser.pyx":221
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new EntityInstance()
 * 
 */
  }

  /* "turbo_parser.pyx":219
 *     cdef EntityInstance *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PEntityInstance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":224
 *             self.thisptr = new EntityInstance()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_15PEntityInstance_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_15PEntityInstance_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_15PEntityInstance_2__dealloc__(((struct __pyx_obj_11turboparser_PEntityInstance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_15PEntityInstance_2__dealloc__(struct __pyx_obj_11turboparser_PEntityInstance *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":225
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":226
 *     def __dealloc__(self):
 *         if self.allocate:
 *           del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, vector[string] forms, vector[string] pos, \
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":225
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":224
 *             self.thisptr = new EntityInstance()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":228
 *           del self.thisptr
 * 
 *     def initialize(self, vector[string] forms, vector[string] pos, \             # <<<<<<<<<<<<<<
 *                    vector[string] tags):
 *         self.thisptr.Initialize(forms, pos, tags)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_15PEntityInstance_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_15PEntityInstance_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<std::string>  __pyx_v_forms;
  std::vector<std::string>  __pyx_v_pos;
  std::vector<std::string>  __pyx_v_tags;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_forms,&__pyx_n_s_pos,&__pyx_n_s_tags,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forms)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(1, 228, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(1, 228, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(1, 228, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_forms = __pyx_convert_vector_from_py_std_3a__3a_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 228, __pyx_L3_error)
    __pyx_v_pos = __pyx_convert_vector_from_py_std_3a__3a_string(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 228, __pyx_L3_error)
    __pyx_v_tags = __pyx_convert_vector_from_py_std_3a__3a_string(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 229, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 228, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PEntityInstance.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_15PEntityInstance_4initialize(((struct __pyx_obj_11turboparser_PEntityInstance *)__pyx_v_self), __pyx_v_forms, __pyx_v_pos, __pyx_v_tags);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_15PEntityInstance_4initialize(struct __pyx_obj_11turboparser_PEntityInstance *__pyx_v_self, std::vector<std::string>  __pyx_v_forms, std::vector<std::string>  __pyx_v_pos, std::vector<std::string>  __pyx_v_tags) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "turbo_parser.pyx":230
 *     def initialize(self, vector[string] forms, vector[string] pos, \
 *                    vector[string] tags):
 *         self.thisptr.Initialize(forms, pos, tags)             # <<<<<<<<<<<<<<
 * 
 *     def get_tag(self, i):
 */
  __pyx_v_self->thisptr->Initialize(__pyx_v_forms, __pyx_v_pos, __pyx_v_tags);

  /* "turbo_parser.pyx":228
 *           del self.thisptr
 * 
 *     def initialize(self, vector[string] forms, vector[string] pos, \             # <<<<<<<<<<<<<<
 *                    vector[string] tags):
 *         self.thisptr.Initialize(forms, pos, tags)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":232
 *         self.thisptr.Initialize(forms, pos, tags)
 * 
 *     def get_tag(self, i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetTag(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_15PEntityInstance_7get_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_11turboparser_15PEntityInstance_7get_tag(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tag (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_15PEntityInstance_6get_tag(((struct __pyx_obj_11turboparser_PEntityInstance *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_15PEntityInstance_6get_tag(struct __pyx_obj_11turboparser_PEntityInstance *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_tag", 0);

  /* "turbo_parser.pyx":233
 * 
 *     def get_tag(self, i):
 *         return self.thisptr.GetTag(i)             # <<<<<<<<<<<<<<
 * 
 * cdef class PDependencyInstance:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 233, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetTag(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":232
 *         self.thisptr.Initialize(forms, pos, tags)
 * 
 *     def get_tag(self, i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetTag(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PEntityInstance.get_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_15PEntityInstance_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_15PEntityInstance_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_15PEntityInstance_8__reduce_cython__(((struct __pyx_obj_11turboparser_PEntityInstance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_15PEntityInstance_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PEntityInstance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PEntityInstance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_15PEntityInstance_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_15PEntityInstance_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_15PEntityInstance_10__setstate_cython__(((struct __pyx_obj_11turboparser_PEntityInstance *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_15PEntityInstance_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PEntityInstance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PEntityInstance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":238
 *     cdef DependencyInstance *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_19PDependencyInstance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_19PDependencyInstance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 238, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 238, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PDependencyInstance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_19PDependencyInstance___cinit__(((struct __pyx_obj_11turboparser_PDependencyInstance *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_19PDependencyInstance___cinit__(struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":239
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new DependencyInstance()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 239, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":240
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new DependencyInstance()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 240, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":241
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new DependencyInstance()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new DependencyInstance();

    /* "turbo_parser.pyx":240
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new DependencyInstance()
 * 
 */
  }

  /* "turbo_parser.pyx":238
 *     cdef DependencyInstance *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PDependencyInstance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":243
 *             self.thisptr = new DependencyInstance()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_19PDependencyInstance_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_19PDependencyInstance_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_19PDependencyInstance_2__dealloc__(((struct __pyx_obj_11turboparser_PDependencyInstance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_19PDependencyInstance_2__dealloc__(struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":244
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":245
 *     def __dealloc__(self):
 *         if self.allocate:
 *           del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, vector[string] forms, vector[string] lemmas, \
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":244
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":243
 *             self.thisptr = new DependencyInstance()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":247
 *           del self.thisptr
 * 
 *     def initialize(self, vector[string] forms, vector[string] lemmas, \             # <<<<<<<<<<<<<<
 *                    vector[string] cpos, vector[string] pos, \
 *                    vector[vector[string]] feats, vector[string] deprels, \
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_19PDependencyInstance_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_19PDependencyInstance_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<std::string>  __pyx_v_forms;
  std::vector<std::string>  __pyx_v_lemmas;
  std::vector<std::string>  __pyx_v_cpos;
  std::vector<std::string>  __pyx_v_pos;
  std::vector<std::vector<std::string> >  __pyx_v_feats;
  std::vector<std::string>  __pyx_v_deprels;
  std::vector<int>  __pyx_v_heads;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_forms,&__pyx_n_s_lemmas,&__pyx_n_s_cpos,&__pyx_n_s_pos,&__pyx_n_s_feats,&__pyx_n_s_deprels,&__pyx_n_s_heads,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forms)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lemmas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 7, 7, 1); __PYX_ERR(1, 247, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cpos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 7, 7, 2); __PYX_ERR(1, 247, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 7, 7, 3); __PYX_ERR(1, 247, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_feats)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 7, 7, 4); __PYX_ERR(1, 247, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_deprels)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 7, 7, 5); __PYX_ERR(1, 247, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_heads)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 7, 7, 6); __PYX_ERR(1, 247, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(1, 247, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_forms = __pyx_convert_vector_from_py_std_3a__3a_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 247, __pyx_L3_error)
    __pyx_v_lemmas = __pyx_convert_vector_from_py_std_3a__3a_string(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 247, __pyx_L3_error)
    __pyx_v_cpos = __pyx_convert_vector_from_py_std_3a__3a_string(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 248, __pyx_L3_error)
    __pyx_v_pos = __pyx_convert_vector_from_py_std_3a__3a_string(values[3]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 248, __pyx_L3_error)
    __pyx_v_feats = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(values[4]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 249, __pyx_L3_error)
    __pyx_v_deprels = __pyx_convert_vector_from_py_std_3a__3a_string(values[5]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 249, __pyx_L3_error)
    __pyx_v_heads = __pyx_convert_vector_from_py_int(values[6]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 250, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 247, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PDependencyInstance.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_19PDependencyInstance_4initialize(((struct __pyx_obj_11turboparser_PDependencyInstance *)__pyx_v_self), __pyx_v_forms, __pyx_v_lemmas, __pyx_v_cpos, __pyx_v_pos, __pyx_v_feats, __pyx_v_deprels, __pyx_v_heads);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_19PDependencyInstance_4initialize(struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self, std::vector<std::string>  __pyx_v_forms, std::vector<std::string>  __pyx_v_lemmas, std::vector<std::string>  __pyx_v_cpos, std::vector<std::string>  __pyx_v_pos, std::vector<std::vector<std::string> >  __pyx_v_feats, std::vector<std::string>  __pyx_v_deprels, std::vector<int>  __pyx_v_heads) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "turbo_parser.pyx":251
 *                    vector[vector[string]] feats, vector[string] deprels, \
 *                    vector[int] heads):
 *         self.thisptr.Initialize(forms, lemmas, cpos, pos, feats, deprels, heads)             # <<<<<<<<<<<<<<
 * 
 *     def get_head(self, i):
 */
  __pyx_v_self->thisptr->Initialize(__pyx_v_forms, __pyx_v_lemmas, __pyx_v_cpos, __pyx_v_pos, __pyx_v_feats, __pyx_v_deprels, __pyx_v_heads);

  /* "turbo_parser.pyx":247
 *           del self.thisptr
 * 
 *     def initialize(self, vector[string] forms, vector[string] lemmas, \             # <<<<<<<<<<<<<<
 *                    vector[string] cpos, vector[string] pos, \
 *                    vector[vector[string]] feats, vector[string] deprels, \
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":253
 *         self.thisptr.Initialize(forms, lemmas, cpos, pos, feats, deprels, heads)
 * 
 *     def get_head(self, i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetHead(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_19PDependencyInstance_7get_head(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_11turboparser_19PDependencyInstance_7get_head(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_head (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_19PDependencyInstance_6get_head(((struct __pyx_obj_11turboparser_PDependencyInstance *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_19PDependencyInstance_6get_head(struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_head", 0);

  /* "turbo_parser.pyx":254
 * 
 *     def get_head(self, i):
 *         return self.thisptr.GetHead(i)             # <<<<<<<<<<<<<<
 * 
 *     def get_dependency_relation(self, i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 254, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->GetHead(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":253
 *         self.thisptr.Initialize(forms, lemmas, cpos, pos, feats, deprels, heads)
 * 
 *     def get_head(self, i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetHead(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PDependencyInstance.get_head", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":256
 *         return self.thisptr.GetHead(i)
 * 
 *     def get_dependency_relation(self, i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetDependencyRelation(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_19PDependencyInstance_9get_dependency_relation(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_11turboparser_19PDependencyInstance_9get_dependency_relation(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_dependency_relation (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_19PDependencyInstance_8get_dependency_relation(((struct __pyx_obj_11turboparser_PDependencyInstance *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_19PDependencyInstance_8get_dependency_relation(struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_dependency_relation", 0);

  /* "turbo_parser.pyx":257
 * 
 *     def get_dependency_relation(self, i):
 *         return self.thisptr.GetDependencyRelation(i)             # <<<<<<<<<<<<<<
 * 
 * cdef class PSemanticInstance:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 257, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetDependencyRelation(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":256
 *         return self.thisptr.GetHead(i)
 * 
 *     def get_dependency_relation(self, i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetDependencyRelation(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PDependencyInstance.get_dependency_relation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_19PDependencyInstance_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_19PDependencyInstance_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_19PDependencyInstance_10__reduce_cython__(((struct __pyx_obj_11turboparser_PDependencyInstance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_19PDependencyInstance_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PDependencyInstance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_19PDependencyInstance_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_19PDependencyInstance_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_19PDependencyInstance_12__setstate_cython__(((struct __pyx_obj_11turboparser_PDependencyInstance *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_19PDependencyInstance_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PDependencyInstance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PDependencyInstance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":262
 *     cdef SemanticInstance *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_17PSemanticInstance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_17PSemanticInstance_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 262, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 262, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PSemanticInstance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_17PSemanticInstance___cinit__(((struct __pyx_obj_11turboparser_PSemanticInstance *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_17PSemanticInstance___cinit__(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":263
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new SemanticInstance()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 263, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":264
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new SemanticInstance()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 264, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":265
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new SemanticInstance()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new SemanticInstance();

    /* "turbo_parser.pyx":264
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new SemanticInstance()
 * 
 */
  }

  /* "turbo_parser.pyx":262
 *     cdef SemanticInstance *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PSemanticInstance.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":267
 *             self.thisptr = new SemanticInstance()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_17PSemanticInstance_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_17PSemanticInstance_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_17PSemanticInstance_2__dealloc__(((struct __pyx_obj_11turboparser_PSemanticInstance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_17PSemanticInstance_2__dealloc__(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":268
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":269
 *     def __dealloc__(self):
 *         if self.allocate:
 *           del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, string name, vector[string] forms, \
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":268
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":267
 *             self.thisptr = new SemanticInstance()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":271
 *           del self.thisptr
 * 
 *     def initialize(self, string name, vector[string] forms, \             # <<<<<<<<<<<<<<
 *                    vector[string] lemmas, \
 *                    vector[string] cpos, vector[string] pos, \
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_name;
  std::vector<std::string>  __pyx_v_forms;
  std::vector<std::string>  __pyx_v_lemmas;
  std::vector<std::string>  __pyx_v_cpos;
  std::vector<std::string>  __pyx_v_pos;
  std::vector<std::vector<std::string> >  __pyx_v_feats;
  std::vector<std::string>  __pyx_v_deprels;
  std::vector<int>  __pyx_v_heads;
  std::vector<std::string>  __pyx_v_predicate_names;
  std::vector<int>  __pyx_v_predicate_indices;
  std::vector<std::vector<std::string> >  __pyx_v_argument_roles;
  std::vector<std::vector<int> >  __pyx_v_argument_indices;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_forms,&__pyx_n_s_lemmas,&__pyx_n_s_cpos,&__pyx_n_s_pos,&__pyx_n_s_feats,&__pyx_n_s_deprels,&__pyx_n_s_heads,&__pyx_n_s_predicate_names,&__pyx_n_s_predicate_indices,&__pyx_n_s_argument_roles,&__pyx_n_s_argument_indices,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forms)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 12, 12, 1); __PYX_ERR(1, 271, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lemmas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 12, 12, 2); __PYX_ERR(1, 271, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cpos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 12, 12, 3); __PYX_ERR(1, 271, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 12, 12, 4); __PYX_ERR(1, 271, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_feats)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 12, 12, 5); __PYX_ERR(1, 271, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_deprels)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 12, 12, 6); __PYX_ERR(1, 271, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_heads)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 12, 12, 7); __PYX_ERR(1, 271, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_predicate_names)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 12, 12, 8); __PYX_ERR(1, 271, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_predicate_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 12, 12, 9); __PYX_ERR(1, 271, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_argument_roles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 12, 12, 10); __PYX_ERR(1, 271, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_argument_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 12, 12, 11); __PYX_ERR(1, 271, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(1, 271, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_name = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 271, __pyx_L3_error)
    __pyx_v_forms = __pyx_convert_vector_from_py_std_3a__3a_string(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 271, __pyx_L3_error)
    __pyx_v_lemmas = __pyx_convert_vector_from_py_std_3a__3a_string(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 272, __pyx_L3_error)
    __pyx_v_cpos = __pyx_convert_vector_from_py_std_3a__3a_string(values[3]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 273, __pyx_L3_error)
    __pyx_v_pos = __pyx_convert_vector_from_py_std_3a__3a_string(values[4]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 273, __pyx_L3_error)
    __pyx_v_feats = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(values[5]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 274, __pyx_L3_error)
    __pyx_v_deprels = __pyx_convert_vector_from_py_std_3a__3a_string(values[6]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 274, __pyx_L3_error)
    __pyx_v_heads = __pyx_convert_vector_from_py_int(values[7]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 275, __pyx_L3_error)
    __pyx_v_predicate_names = __pyx_convert_vector_from_py_std_3a__3a_string(values[8]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 275, __pyx_L3_error)
    __pyx_v_predicate_indices = __pyx_convert_vector_from_py_int(values[9]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 276, __pyx_L3_error)
    __pyx_v_argument_roles = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(values[10]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 277, __pyx_L3_error)
    __pyx_v_argument_indices = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(values[11]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 278, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 271, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PSemanticInstance.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_17PSemanticInstance_4initialize(((struct __pyx_obj_11turboparser_PSemanticInstance *)__pyx_v_self), __pyx_v_name, __pyx_v_forms, __pyx_v_lemmas, __pyx_v_cpos, __pyx_v_pos, __pyx_v_feats, __pyx_v_deprels, __pyx_v_heads, __pyx_v_predicate_names, __pyx_v_predicate_indices, __pyx_v_argument_roles, __pyx_v_argument_indices);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_4initialize(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, std::string __pyx_v_name, std::vector<std::string>  __pyx_v_forms, std::vector<std::string>  __pyx_v_lemmas, std::vector<std::string>  __pyx_v_cpos, std::vector<std::string>  __pyx_v_pos, std::vector<std::vector<std::string> >  __pyx_v_feats, std::vector<std::string>  __pyx_v_deprels, std::vector<int>  __pyx_v_heads, std::vector<std::string>  __pyx_v_predicate_names, std::vector<int>  __pyx_v_predicate_indices, std::vector<std::vector<std::string> >  __pyx_v_argument_roles, std::vector<std::vector<int> >  __pyx_v_argument_indices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "turbo_parser.pyx":279
 *                    vector[vector[string]] argument_roles, \
 *                    vector[vector[int]] argument_indices):
 *         self.thisptr.Initialize(name, forms, lemmas, cpos, pos, feats, \             # <<<<<<<<<<<<<<
 *                                 deprels,  heads, predicate_names, \
 *                                 predicate_indices, argument_roles, \
 */
  __pyx_v_self->thisptr->Initialize(__pyx_v_name, __pyx_v_forms, __pyx_v_lemmas, __pyx_v_cpos, __pyx_v_pos, __pyx_v_feats, __pyx_v_deprels, __pyx_v_heads, __pyx_v_predicate_names, __pyx_v_predicate_indices, __pyx_v_argument_roles, __pyx_v_argument_indices);

  /* "turbo_parser.pyx":271
 *           del self.thisptr
 * 
 *     def initialize(self, string name, vector[string] forms, \             # <<<<<<<<<<<<<<
 *                    vector[string] lemmas, \
 *                    vector[string] cpos, vector[string] pos, \
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":284
 *                                 argument_indices)
 * 
 *     def get_num_predicates(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetNumPredicates()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_7get_num_predicates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_7get_num_predicates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_num_predicates (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_17PSemanticInstance_6get_num_predicates(((struct __pyx_obj_11turboparser_PSemanticInstance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_6get_num_predicates(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_num_predicates", 0);

  /* "turbo_parser.pyx":285
 * 
 *     def get_num_predicates(self):
 *         return self.thisptr.GetNumPredicates()             # <<<<<<<<<<<<<<
 * 
 *     def get_predicate_name(self, k):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->GetNumPredicates()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":284
 *                                 argument_indices)
 * 
 *     def get_num_predicates(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetNumPredicates()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PSemanticInstance.get_num_predicates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":287
 *         return self.thisptr.GetNumPredicates()
 * 
 *     def get_predicate_name(self, k):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetPredicateName(k)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_9get_predicate_name(PyObject *__pyx_v_self, PyObject *__pyx_v_k); /*proto*/
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_9get_predicate_name(PyObject *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_predicate_name (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_17PSemanticInstance_8get_predicate_name(((struct __pyx_obj_11turboparser_PSemanticInstance *)__pyx_v_self), ((PyObject *)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_8get_predicate_name(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_predicate_name", 0);

  /* "turbo_parser.pyx":288
 * 
 *     def get_predicate_name(self, k):
 *         return self.thisptr.GetPredicateName(k)             # <<<<<<<<<<<<<<
 * 
 *     def get_predicate_index(self, k):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 288, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetPredicateName(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":287
 *         return self.thisptr.GetNumPredicates()
 * 
 *     def get_predicate_name(self, k):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetPredicateName(k)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PSemanticInstance.get_predicate_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":290
 *         return self.thisptr.GetPredicateName(k)
 * 
 *     def get_predicate_index(self, k):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetPredicateIndex(k)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_11get_predicate_index(PyObject *__pyx_v_self, PyObject *__pyx_v_k); /*proto*/
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_11get_predicate_index(PyObject *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_predicate_index (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_17PSemanticInstance_10get_predicate_index(((struct __pyx_obj_11turboparser_PSemanticInstance *)__pyx_v_self), ((PyObject *)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_10get_predicate_index(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_predicate_index", 0);

  /* "turbo_parser.pyx":291
 * 
 *     def get_predicate_index(self, k):
 *         return self.thisptr.GetPredicateIndex(k)             # <<<<<<<<<<<<<<
 * 
 *     def get_num_arguments_predicate(self, k):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 291, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->GetPredicateIndex(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":290
 *         return self.thisptr.GetPredicateName(k)
 * 
 *     def get_predicate_index(self, k):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetPredicateIndex(k)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PSemanticInstance.get_predicate_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":293
 *         return self.thisptr.GetPredicateIndex(k)
 * 
 *     def get_num_arguments_predicate(self, k):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetNumArgumentsPredicate(k)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_13get_num_arguments_predicate(PyObject *__pyx_v_self, PyObject *__pyx_v_k); /*proto*/
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_13get_num_arguments_predicate(PyObject *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_num_arguments_predicate (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_17PSemanticInstance_12get_num_arguments_predicate(((struct __pyx_obj_11turboparser_PSemanticInstance *)__pyx_v_self), ((PyObject *)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_12get_num_arguments_predicate(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_num_arguments_predicate", 0);

  /* "turbo_parser.pyx":294
 * 
 *     def get_num_arguments_predicate(self, k):
 *         return self.thisptr.GetNumArgumentsPredicate(k)             # <<<<<<<<<<<<<<
 * 
 *     def get_argument_role(self, k, l):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 294, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->GetNumArgumentsPredicate(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":293
 *         return self.thisptr.GetPredicateIndex(k)
 * 
 *     def get_num_arguments_predicate(self, k):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetNumArgumentsPredicate(k)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PSemanticInstance.get_num_arguments_predicate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":296
 *         return self.thisptr.GetNumArgumentsPredicate(k)
 * 
 *     def get_argument_role(self, k, l):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetArgumentRole(k, l)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_15get_argument_role(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_15get_argument_role(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_argument_role (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_l,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_argument_role", 1, 2, 2, 1); __PYX_ERR(1, 296, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_argument_role") < 0)) __PYX_ERR(1, 296, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_k = values[0];
    __pyx_v_l = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_argument_role", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 296, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PSemanticInstance.get_argument_role", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_17PSemanticInstance_14get_argument_role(((struct __pyx_obj_11turboparser_PSemanticInstance *)__pyx_v_self), __pyx_v_k, __pyx_v_l);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_14get_argument_role(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_l) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_argument_role", 0);

  /* "turbo_parser.pyx":297
 * 
 *     def get_argument_role(self, k, l):
 *         return self.thisptr.GetArgumentRole(k, l)             # <<<<<<<<<<<<<<
 * 
 *     def get_argument_index(self, k, l):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 297, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_l); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 297, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->GetArgumentRole(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":296
 *         return self.thisptr.GetNumArgumentsPredicate(k)
 * 
 *     def get_argument_role(self, k, l):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetArgumentRole(k, l)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("turboparser.PSemanticInstance.get_argument_role", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":299
 *         return self.thisptr.GetArgumentRole(k, l)
 * 
 *     def get_argument_index(self, k, l):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetArgumentIndex(k, l)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_17get_argument_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_17get_argument_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_argument_index (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_l,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_argument_index", 1, 2, 2, 1); __PYX_ERR(1, 299, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_argument_index") < 0)) __PYX_ERR(1, 299, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_k = values[0];
    __pyx_v_l = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_argument_index", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 299, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PSemanticInstance.get_argument_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_17PSemanticInstance_16get_argument_index(((struct __pyx_obj_11turboparser_PSemanticInstance *)__pyx_v_self), __pyx_v_k, __pyx_v_l);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_16get_argument_index(struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, PyObject *__pyx_v_k, PyObject *__pyx_v_l) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_argument_index", 0);

  /* "turbo_parser.pyx":300
 * 
 *     def get_argument_index(self, k, l):
 *         return self.thisptr.GetArgumentIndex(k, l)             # <<<<<<<<<<<<<<
 * 
 * cdef class PNamedSpan:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 300, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_l); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 300, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->GetArgumentIndex(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":299
 *         return self.thisptr.GetArgumentRole(k, l)
 * 
 *     def get_argument_index(self, k, l):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetArgumentIndex(k, l)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("turboparser.PSemanticInstance.get_argument_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_17PSemanticInstance_18__reduce_cython__(((struct __pyx_obj_11turboparser_PSemanticInstance *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PSemanticInstance.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_17PSemanticInstance_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_17PSemanticInstance_20__setstate_cython__(((struct __pyx_obj_11turboparser_PSemanticInstance *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_17PSemanticInstance_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PSemanticInstance *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PSemanticInstance.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":305
 *     cdef NamedSpan *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, start=-1, end=-1, name='', allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_10PNamedSpan_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_10PNamedSpan_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_end = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start,&__pyx_n_s_end,&__pyx_n_s_name,&__pyx_n_s_allocate,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)__pyx_int_neg_1);
    values[1] = ((PyObject *)__pyx_int_neg_1);
    values[2] = ((PyObject *)__pyx_kp_s__13);
    values[3] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_end);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 305, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_start = values[0];
    __pyx_v_end = values[1];
    __pyx_v_name = values[2];
    __pyx_v_allocate = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 305, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PNamedSpan.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_10PNamedSpan___cinit__(((struct __pyx_obj_11turboparser_PNamedSpan *)__pyx_v_self), __pyx_v_start, __pyx_v_end, __pyx_v_name, __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_10PNamedSpan___cinit__(struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self, PyObject *__pyx_v_start, PyObject *__pyx_v_end, PyObject *__pyx_v_name, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":306
 *     cdef bool allocate
 *     def __cinit__(self, start=-1, end=-1, name='', allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new NamedSpan(start, end, name)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 306, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":307
 *     def __cinit__(self, start=-1, end=-1, name='', allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new NamedSpan(start, end, name)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 307, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":308
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new NamedSpan(start, end, name)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_start); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 308, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_end); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 308, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 308, __pyx_L1_error)
    __pyx_v_self->thisptr = new NamedSpan(__pyx_t_3, __pyx_t_4, __pyx_t_5);

    /* "turbo_parser.pyx":307
 *     def __cinit__(self, start=-1, end=-1, name='', allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new NamedSpan(start, end, name)
 * 
 */
  }

  /* "turbo_parser.pyx":305
 *     cdef NamedSpan *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, start=-1, end=-1, name='', allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PNamedSpan.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":310
 *             self.thisptr = new NamedSpan(start, end, name)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_10PNamedSpan_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_10PNamedSpan_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_10PNamedSpan_2__dealloc__(((struct __pyx_obj_11turboparser_PNamedSpan *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_10PNamedSpan_2__dealloc__(struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":311
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":312
 *     def __dealloc__(self):
 *         if self.allocate:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def start(self):
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":311
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":310
 *             self.thisptr = new NamedSpan(start, end, name)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":314
 *             del self.thisptr
 * 
 *     def start(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.start()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_10PNamedSpan_5start(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_10PNamedSpan_5start(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_10PNamedSpan_4start(((struct __pyx_obj_11turboparser_PNamedSpan *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_10PNamedSpan_4start(struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("start", 0);

  /* "turbo_parser.pyx":315
 * 
 *     def start(self):
 *         return self.thisptr.start()             # <<<<<<<<<<<<<<
 * 
 *     def end(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->start()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":314
 *             del self.thisptr
 * 
 *     def start(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.start()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PNamedSpan.start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":317
 *         return self.thisptr.start()
 * 
 *     def end(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.end()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_10PNamedSpan_7end(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_10PNamedSpan_7end(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_10PNamedSpan_6end(((struct __pyx_obj_11turboparser_PNamedSpan *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_10PNamedSpan_6end(struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("end", 0);

  /* "turbo_parser.pyx":318
 * 
 *     def end(self):
 *         return self.thisptr.end()             # <<<<<<<<<<<<<<
 * 
 *     def name(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->end()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":317
 *         return self.thisptr.start()
 * 
 *     def end(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.end()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PNamedSpan.end", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":320
 *         return self.thisptr.end()
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.name()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_10PNamedSpan_9name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_10PNamedSpan_9name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("name (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_10PNamedSpan_8name(((struct __pyx_obj_11turboparser_PNamedSpan *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_10PNamedSpan_8name(struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("name", 0);

  /* "turbo_parser.pyx":321
 * 
 *     def name(self):
 *         return self.thisptr.name()             # <<<<<<<<<<<<<<
 * 
 * cdef class PEntitySpan(PNamedSpan):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->name()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "turbo_parser.pyx":320
 *         return self.thisptr.end()
 * 
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.name()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PNamedSpan.name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_10PNamedSpan_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_10PNamedSpan_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_10PNamedSpan_10__reduce_cython__(((struct __pyx_obj_11turboparser_PNamedSpan *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_10PNamedSpan_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PNamedSpan.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_10PNamedSpan_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_10PNamedSpan_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_10PNamedSpan_12__setstate_cython__(((struct __pyx_obj_11turboparser_PNamedSpan *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_10PNamedSpan_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PNamedSpan.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":324
 * 
 * cdef class PEntitySpan(PNamedSpan):
 *     def __cinit__(self, start=-1, end=-1, name='', allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_11PEntitySpan_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_11PEntitySpan_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_end = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start,&__pyx_n_s_end,&__pyx_n_s_name,&__pyx_n_s_allocate,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)__pyx_int_neg_1);
    values[1] = ((PyObject *)__pyx_int_neg_1);
    values[2] = ((PyObject *)__pyx_kp_s__13);
    values[3] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_end);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 324, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_start = values[0];
    __pyx_v_end = values[1];
    __pyx_v_name = values[2];
    __pyx_v_allocate = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 324, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PEntitySpan.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_11PEntitySpan___cinit__(((struct __pyx_obj_11turboparser_PEntitySpan *)__pyx_v_self), __pyx_v_start, __pyx_v_end, __pyx_v_name, __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_11PEntitySpan___cinit__(struct __pyx_obj_11turboparser_PEntitySpan *__pyx_v_self, PyObject *__pyx_v_start, PyObject *__pyx_v_end, PyObject *__pyx_v_name, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":325
 * cdef class PEntitySpan(PNamedSpan):
 *     def __cinit__(self, start=-1, end=-1, name='', allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new EntitySpan(start, end, name)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 325, __pyx_L1_error)
  __pyx_v_self->__pyx_base.allocate = __pyx_t_1;

  /* "turbo_parser.pyx":326
 *     def __cinit__(self, start=-1, end=-1, name='', allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new EntitySpan(start, end, name)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 326, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":327
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new EntitySpan(start, end, name)             # <<<<<<<<<<<<<<
 * 
 * cdef class PCoreferenceSentence:
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_start); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 327, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_end); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 327, __pyx_L1_error)
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 327, __pyx_L1_error)
    __pyx_v_self->__pyx_base.thisptr = new EntitySpan(__pyx_t_3, __pyx_t_4, __pyx_t_5);

    /* "turbo_parser.pyx":326
 *     def __cinit__(self, start=-1, end=-1, name='', allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new EntitySpan(start, end, name)
 * 
 */
  }

  /* "turbo_parser.pyx":324
 * 
 * cdef class PEntitySpan(PNamedSpan):
 *     def __cinit__(self, start=-1, end=-1, name='', allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PEntitySpan.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_11PEntitySpan_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_11PEntitySpan_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_11PEntitySpan_2__reduce_cython__(((struct __pyx_obj_11turboparser_PEntitySpan *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_11PEntitySpan_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PEntitySpan *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PEntitySpan.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_11PEntitySpan_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_11PEntitySpan_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_11PEntitySpan_4__setstate_cython__(((struct __pyx_obj_11turboparser_PEntitySpan *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_11PEntitySpan_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PEntitySpan *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PEntitySpan.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":332
 *     cdef CoreferenceSentence *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_20PCoreferenceSentence_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_20PCoreferenceSentence_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 332, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 332, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PCoreferenceSentence.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_20PCoreferenceSentence___cinit__(((struct __pyx_obj_11turboparser_PCoreferenceSentence *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_20PCoreferenceSentence___cinit__(struct __pyx_obj_11turboparser_PCoreferenceSentence *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":333
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new CoreferenceSentence()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 333, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":334
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new CoreferenceSentence()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 334, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":335
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new CoreferenceSentence()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new CoreferenceSentence();

    /* "turbo_parser.pyx":334
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new CoreferenceSentence()
 * 
 */
  }

  /* "turbo_parser.pyx":332
 *     cdef CoreferenceSentence *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PCoreferenceSentence.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":337
 *             self.thisptr = new CoreferenceSentence()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_20PCoreferenceSentence_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_20PCoreferenceSentence_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_20PCoreferenceSentence_2__dealloc__(((struct __pyx_obj_11turboparser_PCoreferenceSentence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_20PCoreferenceSentence_2__dealloc__(struct __pyx_obj_11turboparser_PCoreferenceSentence *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":338
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":339
 *     def __dealloc__(self):
 *         if self.allocate:
 *           del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, string name, vector[string] forms, \
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":338
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":337
 *             self.thisptr = new CoreferenceSentence()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":341
 *           del self.thisptr
 * 
 *     def initialize(self, string name, vector[string] forms, \             # <<<<<<<<<<<<<<
 *                    vector[string] lemmas, \
 *                    vector[string] cpos, vector[string] pos, \
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_20PCoreferenceSentence_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_20PCoreferenceSentence_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_name;
  std::vector<std::string>  __pyx_v_forms;
  std::vector<std::string>  __pyx_v_lemmas;
  std::vector<std::string>  __pyx_v_cpos;
  std::vector<std::string>  __pyx_v_pos;
  std::vector<std::vector<std::string> >  __pyx_v_feats;
  std::vector<std::string>  __pyx_v_deprels;
  std::vector<int>  __pyx_v_heads;
  std::vector<std::string>  __pyx_v_predicate_names;
  std::vector<int>  __pyx_v_predicate_indices;
  std::vector<std::vector<std::string> >  __pyx_v_argument_roles;
  std::vector<std::vector<int> >  __pyx_v_argument_indices;
  std::vector<std::string>  __pyx_v_speakers;
  PyObject *__pyx_v_p_entity_spans = 0;
  PyObject *__pyx_v_p_constituent_spans = 0;
  PyObject *__pyx_v_p_coreference_spans = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_forms,&__pyx_n_s_lemmas,&__pyx_n_s_cpos,&__pyx_n_s_pos,&__pyx_n_s_feats,&__pyx_n_s_deprels,&__pyx_n_s_heads,&__pyx_n_s_predicate_names,&__pyx_n_s_predicate_indices,&__pyx_n_s_argument_roles,&__pyx_n_s_argument_indices,&__pyx_n_s_speakers,&__pyx_n_s_p_entity_spans,&__pyx_n_s_p_constituent_spans,&__pyx_n_s_p_coreference_spans,0};
    PyObject* values[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_forms)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 1); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lemmas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 2); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cpos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 3); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 4); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_feats)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 5); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_deprels)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 6); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_heads)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 7); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_predicate_names)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 8); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_predicate_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 9); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_argument_roles)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 10); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_argument_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 11); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_speakers)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 12); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_entity_spans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 13); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_constituent_spans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 14); __PYX_ERR(1, 341, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_coreference_spans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, 15); __PYX_ERR(1, 341, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(1, 341, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 16) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
    }
    __pyx_v_name = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 341, __pyx_L3_error)
    __pyx_v_forms = __pyx_convert_vector_from_py_std_3a__3a_string(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 341, __pyx_L3_error)
    __pyx_v_lemmas = __pyx_convert_vector_from_py_std_3a__3a_string(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 342, __pyx_L3_error)
    __pyx_v_cpos = __pyx_convert_vector_from_py_std_3a__3a_string(values[3]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 343, __pyx_L3_error)
    __pyx_v_pos = __pyx_convert_vector_from_py_std_3a__3a_string(values[4]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 343, __pyx_L3_error)
    __pyx_v_feats = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(values[5]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 344, __pyx_L3_error)
    __pyx_v_deprels = __pyx_convert_vector_from_py_std_3a__3a_string(values[6]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 344, __pyx_L3_error)
    __pyx_v_heads = __pyx_convert_vector_from_py_int(values[7]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)
    __pyx_v_predicate_names = __pyx_convert_vector_from_py_std_3a__3a_string(values[8]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)
    __pyx_v_predicate_indices = __pyx_convert_vector_from_py_int(values[9]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 346, __pyx_L3_error)
    __pyx_v_argument_roles = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(values[10]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 347, __pyx_L3_error)
    __pyx_v_argument_indices = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(values[11]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 348, __pyx_L3_error)
    __pyx_v_speakers = __pyx_convert_vector_from_py_std_3a__3a_string(values[12]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 349, __pyx_L3_error)
    __pyx_v_p_entity_spans = values[13];
    __pyx_v_p_constituent_spans = values[14];
    __pyx_v_p_coreference_spans = values[15];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 16, 16, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 341, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PCoreferenceSentence.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_20PCoreferenceSentence_4initialize(((struct __pyx_obj_11turboparser_PCoreferenceSentence *)__pyx_v_self), __pyx_v_name, __pyx_v_forms, __pyx_v_lemmas, __pyx_v_cpos, __pyx_v_pos, __pyx_v_feats, __pyx_v_deprels, __pyx_v_heads, __pyx_v_predicate_names, __pyx_v_predicate_indices, __pyx_v_argument_roles, __pyx_v_argument_indices, __pyx_v_speakers, __pyx_v_p_entity_spans, __pyx_v_p_constituent_spans, __pyx_v_p_coreference_spans);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_20PCoreferenceSentence_4initialize(struct __pyx_obj_11turboparser_PCoreferenceSentence *__pyx_v_self, std::string __pyx_v_name, std::vector<std::string>  __pyx_v_forms, std::vector<std::string>  __pyx_v_lemmas, std::vector<std::string>  __pyx_v_cpos, std::vector<std::string>  __pyx_v_pos, std::vector<std::vector<std::string> >  __pyx_v_feats, std::vector<std::string>  __pyx_v_deprels, std::vector<int>  __pyx_v_heads, std::vector<std::string>  __pyx_v_predicate_names, std::vector<int>  __pyx_v_predicate_indices, std::vector<std::vector<std::string> >  __pyx_v_argument_roles, std::vector<std::vector<int> >  __pyx_v_argument_indices, std::vector<std::string>  __pyx_v_speakers, PyObject *__pyx_v_p_entity_spans, PyObject *__pyx_v_p_constituent_spans, PyObject *__pyx_v_p_coreference_spans) {
  std::vector<NamedSpan *>  __pyx_v_entity_spans;
  PyObject *__pyx_v_p_span = NULL;
  std::vector<NamedSpan *>  __pyx_v_constituent_spans;
  std::vector<NamedSpan *>  __pyx_v_coreference_spans;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "turbo_parser.pyx":354
 *                    p_coreference_spans):
 *         cdef vector[NamedSpan*] entity_spans
 *         for p_span in p_entity_spans:             # <<<<<<<<<<<<<<
 *             entity_spans.push_back((<PEntitySpan>p_span).thisptr)
 *         cdef vector[NamedSpan*] constituent_spans
 */
  if (likely(PyList_CheckExact(__pyx_v_p_entity_spans)) || PyTuple_CheckExact(__pyx_v_p_entity_spans)) {
    __pyx_t_1 = __pyx_v_p_entity_spans; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_p_entity_spans); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 354, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 354, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 354, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 354, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_p_span, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "turbo_parser.pyx":355
 *         cdef vector[NamedSpan*] entity_spans
 *         for p_span in p_entity_spans:
 *             entity_spans.push_back((<PEntitySpan>p_span).thisptr)             # <<<<<<<<<<<<<<
 *         cdef vector[NamedSpan*] constituent_spans
 *         for p_span in p_constituent_spans:
 */
    try {
      __pyx_v_entity_spans.push_back(((struct __pyx_obj_11turboparser_PEntitySpan *)__pyx_v_p_span)->__pyx_base.thisptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 355, __pyx_L1_error)
    }

    /* "turbo_parser.pyx":354
 *                    p_coreference_spans):
 *         cdef vector[NamedSpan*] entity_spans
 *         for p_span in p_entity_spans:             # <<<<<<<<<<<<<<
 *             entity_spans.push_back((<PEntitySpan>p_span).thisptr)
 *         cdef vector[NamedSpan*] constituent_spans
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "turbo_parser.pyx":357
 *             entity_spans.push_back((<PEntitySpan>p_span).thisptr)
 *         cdef vector[NamedSpan*] constituent_spans
 *         for p_span in p_constituent_spans:             # <<<<<<<<<<<<<<
 *             constituent_spans.push_back((<PNamedSpan>p_span).thisptr)
 *         cdef vector[NamedSpan*] coreference_spans
 */
  if (likely(PyList_CheckExact(__pyx_v_p_constituent_spans)) || PyTuple_CheckExact(__pyx_v_p_constituent_spans)) {
    __pyx_t_1 = __pyx_v_p_constituent_spans; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_p_constituent_spans); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 357, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 357, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 357, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 357, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 357, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 357, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_p_span, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "turbo_parser.pyx":358
 *         cdef vector[NamedSpan*] constituent_spans
 *         for p_span in p_constituent_spans:
 *             constituent_spans.push_back((<PNamedSpan>p_span).thisptr)             # <<<<<<<<<<<<<<
 *         cdef vector[NamedSpan*] coreference_spans
 *         for p_span in p_coreference_spans:
 */
    try {
      __pyx_v_constituent_spans.push_back(((struct __pyx_obj_11turboparser_PNamedSpan *)__pyx_v_p_span)->thisptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 358, __pyx_L1_error)
    }

    /* "turbo_parser.pyx":357
 *             entity_spans.push_back((<PEntitySpan>p_span).thisptr)
 *         cdef vector[NamedSpan*] constituent_spans
 *         for p_span in p_constituent_spans:             # <<<<<<<<<<<<<<
 *             constituent_spans.push_back((<PNamedSpan>p_span).thisptr)
 *         cdef vector[NamedSpan*] coreference_spans
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "turbo_parser.pyx":360
 *             constituent_spans.push_back((<PNamedSpan>p_span).thisptr)
 *         cdef vector[NamedSpan*] coreference_spans
 *         for p_span in p_coreference_spans:             # <<<<<<<<<<<<<<
 *             coreference_spans.push_back((<PNamedSpan>p_span).thisptr)
 *         self.thisptr.Initialize(name, forms, lemmas, cpos, pos, feats, \
 */
  if (likely(PyList_CheckExact(__pyx_v_p_coreference_spans)) || PyTuple_CheckExact(__pyx_v_p_coreference_spans)) {
    __pyx_t_1 = __pyx_v_p_coreference_spans; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_p_coreference_spans); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 360, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 360, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 360, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 360, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 360, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 360, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_p_span, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "turbo_parser.pyx":361
 *         cdef vector[NamedSpan*] coreference_spans
 *         for p_span in p_coreference_spans:
 *             coreference_spans.push_back((<PNamedSpan>p_span).thisptr)             # <<<<<<<<<<<<<<
 *         self.thisptr.Initialize(name, forms, lemmas, cpos, pos, feats, \
 *                                 deprels,  heads, predicate_names, \
 */
    try {
      __pyx_v_coreference_spans.push_back(((struct __pyx_obj_11turboparser_PNamedSpan *)__pyx_v_p_span)->thisptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 361, __pyx_L1_error)
    }

    /* "turbo_parser.pyx":360
 *             constituent_spans.push_back((<PNamedSpan>p_span).thisptr)
 *         cdef vector[NamedSpan*] coreference_spans
 *         for p_span in p_coreference_spans:             # <<<<<<<<<<<<<<
 *             coreference_spans.push_back((<PNamedSpan>p_span).thisptr)
 *         self.thisptr.Initialize(name, forms, lemmas, cpos, pos, feats, \
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "turbo_parser.pyx":362
 *         for p_span in p_coreference_spans:
 *             coreference_spans.push_back((<PNamedSpan>p_span).thisptr)
 *         self.thisptr.Initialize(name, forms, lemmas, cpos, pos, feats, \             # <<<<<<<<<<<<<<
 *                                 deprels,  heads, predicate_names, \
 *                                 predicate_indices, argument_roles, \
 */
  __pyx_v_self->thisptr->Initialize(__pyx_v_name, __pyx_v_forms, __pyx_v_lemmas, __pyx_v_cpos, __pyx_v_pos, __pyx_v_feats, __pyx_v_deprels, __pyx_v_heads, __pyx_v_predicate_names, __pyx_v_predicate_indices, __pyx_v_argument_roles, __pyx_v_argument_indices, __pyx_v_speakers, __pyx_v_entity_spans, __pyx_v_constituent_spans, __pyx_v_coreference_spans);

  /* "turbo_parser.pyx":341
 *           del self.thisptr
 * 
 *     def initialize(self, string name, vector[string] forms, \             # <<<<<<<<<<<<<<
 *                    vector[string] lemmas, \
 *                    vector[string] cpos, vector[string] pos, \
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("turboparser.PCoreferenceSentence.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p_span);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":368
 *                                 constituent_spans, coreference_spans)
 * 
 *     def get_coreference_spans(self):             # <<<<<<<<<<<<<<
 *         cdef vector[NamedSpan*] coreference_spans = \
 *             self.thisptr.GetCoreferenceSpans()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_20PCoreferenceSentence_7get_coreference_spans(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_20PCoreferenceSentence_7get_coreference_spans(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_coreference_spans (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_20PCoreferenceSentence_6get_coreference_spans(((struct __pyx_obj_11turboparser_PCoreferenceSentence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_20PCoreferenceSentence_6get_coreference_spans(struct __pyx_obj_11turboparser_PCoreferenceSentence *__pyx_v_self) {
  std::vector<NamedSpan *>  __pyx_v_coreference_spans;
  PyObject *__pyx_v_p_coreference_spans = NULL;
  NamedSpan *__pyx_v_span;
  struct __pyx_obj_11turboparser_PNamedSpan *__pyx_v_p_span = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<NamedSpan *> ::iterator __pyx_t_2;
  NamedSpan *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get_coreference_spans", 0);

  /* "turbo_parser.pyx":370
 *     def get_coreference_spans(self):
 *         cdef vector[NamedSpan*] coreference_spans = \
 *             self.thisptr.GetCoreferenceSpans()             # <<<<<<<<<<<<<<
 *         p_coreference_spans = []
 *         for span in coreference_spans:
 */
  __pyx_v_coreference_spans = __pyx_v_self->thisptr->GetCoreferenceSpans();

  /* "turbo_parser.pyx":371
 *         cdef vector[NamedSpan*] coreference_spans = \
 *             self.thisptr.GetCoreferenceSpans()
 *         p_coreference_spans = []             # <<<<<<<<<<<<<<
 *         for span in coreference_spans:
 *             p_span = PNamedSpan(allocate=False)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p_coreference_spans = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "turbo_parser.pyx":372
 *             self.thisptr.GetCoreferenceSpans()
 *         p_coreference_spans = []
 *         for span in coreference_spans:             # <<<<<<<<<<<<<<
 *             p_span = PNamedSpan(allocate=False)
 *             p_span.thisptr = span
 */
  __pyx_t_2 = __pyx_v_coreference_spans.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_coreference_spans.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_span = __pyx_t_3;

    /* "turbo_parser.pyx":373
 *         p_coreference_spans = []
 *         for span in coreference_spans:
 *             p_span = PNamedSpan(allocate=False)             # <<<<<<<<<<<<<<
 *             p_span.thisptr = span
 *             p_coreference_spans.append(p_span)
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate, Py_False) < 0) __PYX_ERR(1, 373, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_11turboparser_PNamedSpan), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_p_span, ((struct __pyx_obj_11turboparser_PNamedSpan *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "turbo_parser.pyx":374
 *         for span in coreference_spans:
 *             p_span = PNamedSpan(allocate=False)
 *             p_span.thisptr = span             # <<<<<<<<<<<<<<
 *             p_coreference_spans.append(p_span)
 *         return p_coreference_spans
 */
    __pyx_v_p_span->thisptr = __pyx_v_span;

    /* "turbo_parser.pyx":375
 *             p_span = PNamedSpan(allocate=False)
 *             p_span.thisptr = span
 *             p_coreference_spans.append(p_span)             # <<<<<<<<<<<<<<
 *         return p_coreference_spans
 * 
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_p_coreference_spans, ((PyObject *)__pyx_v_p_span)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 375, __pyx_L1_error)

    /* "turbo_parser.pyx":372
 *             self.thisptr.GetCoreferenceSpans()
 *         p_coreference_spans = []
 *         for span in coreference_spans:             # <<<<<<<<<<<<<<
 *             p_span = PNamedSpan(allocate=False)
 *             p_span.thisptr = span
 */
  }

  /* "turbo_parser.pyx":376
 *             p_span.thisptr = span
 *             p_coreference_spans.append(p_span)
 *         return p_coreference_spans             # <<<<<<<<<<<<<<
 * 
 * cdef class PCoreferenceDocument:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_p_coreference_spans);
  __pyx_r = __pyx_v_p_coreference_spans;
  goto __pyx_L0;

  /* "turbo_parser.pyx":368
 *                                 constituent_spans, coreference_spans)
 * 
 *     def get_coreference_spans(self):             # <<<<<<<<<<<<<<
 *         cdef vector[NamedSpan*] coreference_spans = \
 *             self.thisptr.GetCoreferenceSpans()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("turboparser.PCoreferenceSentence.get_coreference_spans", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p_coreference_spans);
  __Pyx_XDECREF((PyObject *)__pyx_v_p_span);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_20PCoreferenceSentence_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_20PCoreferenceSentence_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_20PCoreferenceSentence_8__reduce_cython__(((struct __pyx_obj_11turboparser_PCoreferenceSentence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_20PCoreferenceSentence_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PCoreferenceSentence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PCoreferenceSentence.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_20PCoreferenceSentence_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_20PCoreferenceSentence_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_20PCoreferenceSentence_10__setstate_cython__(((struct __pyx_obj_11turboparser_PCoreferenceSentence *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_20PCoreferenceSentence_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PCoreferenceSentence *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PCoreferenceSentence.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":381
 *     cdef CoreferenceDocument *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_20PCoreferenceDocument_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_20PCoreferenceDocument_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 381, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 381, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PCoreferenceDocument.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_20PCoreferenceDocument___cinit__(((struct __pyx_obj_11turboparser_PCoreferenceDocument *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_20PCoreferenceDocument___cinit__(struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":382
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new CoreferenceDocument()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 382, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":383
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new CoreferenceDocument()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 383, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":384
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new CoreferenceDocument()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new CoreferenceDocument();

    /* "turbo_parser.pyx":383
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new CoreferenceDocument()
 * 
 */
  }

  /* "turbo_parser.pyx":381
 *     cdef CoreferenceDocument *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PCoreferenceDocument.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":386
 *             self.thisptr = new CoreferenceDocument()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_20PCoreferenceDocument_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_20PCoreferenceDocument_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_20PCoreferenceDocument_2__dealloc__(((struct __pyx_obj_11turboparser_PCoreferenceDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_20PCoreferenceDocument_2__dealloc__(struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":387
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":388
 *     def __dealloc__(self):
 *         if self.allocate:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, string name, int part_number, \
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":387
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":386
 *             self.thisptr = new CoreferenceDocument()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":390
 *             del self.thisptr
 * 
 *     def initialize(self, string name, int part_number, \             # <<<<<<<<<<<<<<
 *                    p_sentences):
 *         cdef vector[CoreferenceSentence*] sentences
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_20PCoreferenceDocument_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_20PCoreferenceDocument_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_name;
  int __pyx_v_part_number;
  PyObject *__pyx_v_p_sentences = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_part_number,&__pyx_n_s_p_sentences,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_part_number)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(1, 390, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_sentences)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(1, 390, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(1, 390, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_name = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 390, __pyx_L3_error)
    __pyx_v_part_number = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_part_number == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 390, __pyx_L3_error)
    __pyx_v_p_sentences = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 390, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PCoreferenceDocument.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_20PCoreferenceDocument_4initialize(((struct __pyx_obj_11turboparser_PCoreferenceDocument *)__pyx_v_self), __pyx_v_name, __pyx_v_part_number, __pyx_v_p_sentences);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_20PCoreferenceDocument_4initialize(struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self, std::string __pyx_v_name, int __pyx_v_part_number, PyObject *__pyx_v_p_sentences) {
  std::vector<CoreferenceSentence *>  __pyx_v_sentences;
  PyObject *__pyx_v_p_sentence = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "turbo_parser.pyx":393
 *                    p_sentences):
 *         cdef vector[CoreferenceSentence*] sentences
 *         for p_sentence in p_sentences:             # <<<<<<<<<<<<<<
 *             sentences.push_back((<PCoreferenceSentence>p_sentence).thisptr)
 *         self.thisptr.Initialize(name, part_number, sentences)
 */
  if (likely(PyList_CheckExact(__pyx_v_p_sentences)) || PyTuple_CheckExact(__pyx_v_p_sentences)) {
    __pyx_t_1 = __pyx_v_p_sentences; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_p_sentences); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 393, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 393, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 393, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 393, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 393, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 393, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_p_sentence, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "turbo_parser.pyx":394
 *         cdef vector[CoreferenceSentence*] sentences
 *         for p_sentence in p_sentences:
 *             sentences.push_back((<PCoreferenceSentence>p_sentence).thisptr)             # <<<<<<<<<<<<<<
 *         self.thisptr.Initialize(name, part_number, sentences)
 * 
 */
    try {
      __pyx_v_sentences.push_back(((struct __pyx_obj_11turboparser_PCoreferenceSentence *)__pyx_v_p_sentence)->thisptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 394, __pyx_L1_error)
    }

    /* "turbo_parser.pyx":393
 *                    p_sentences):
 *         cdef vector[CoreferenceSentence*] sentences
 *         for p_sentence in p_sentences:             # <<<<<<<<<<<<<<
 *             sentences.push_back((<PCoreferenceSentence>p_sentence).thisptr)
 *         self.thisptr.Initialize(name, part_number, sentences)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "turbo_parser.pyx":395
 *         for p_sentence in p_sentences:
 *             sentences.push_back((<PCoreferenceSentence>p_sentence).thisptr)
 *         self.thisptr.Initialize(name, part_number, sentences)             # <<<<<<<<<<<<<<
 * 
 *     def get_num_sentences(self):
 */
  __pyx_v_self->thisptr->Initialize(__pyx_v_name, __pyx_v_part_number, __pyx_v_sentences);

  /* "turbo_parser.pyx":390
 *             del self.thisptr
 * 
 *     def initialize(self, string name, int part_number, \             # <<<<<<<<<<<<<<
 *                    p_sentences):
 *         cdef vector[CoreferenceSentence*] sentences
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("turboparser.PCoreferenceDocument.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p_sentence);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":397
 *         self.thisptr.Initialize(name, part_number, sentences)
 * 
 *     def get_num_sentences(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.GetNumSentences()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_20PCoreferenceDocument_7get_num_sentences(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_20PCoreferenceDocument_7get_num_sentences(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_num_sentences (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_20PCoreferenceDocument_6get_num_sentences(((struct __pyx_obj_11turboparser_PCoreferenceDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_20PCoreferenceDocument_6get_num_sentences(struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_num_sentences", 0);

  /* "turbo_parser.pyx":398
 * 
 *     def get_num_sentences(self):
 *         self.thisptr.GetNumSentences()             # <<<<<<<<<<<<<<
 * 
 *     def get_sentence(self, int i):
 */
  __pyx_v_self->thisptr->GetNumSentences();

  /* "turbo_parser.pyx":397
 *         self.thisptr.Initialize(name, part_number, sentences)
 * 
 *     def get_num_sentences(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.GetNumSentences()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":400
 *         self.thisptr.GetNumSentences()
 * 
 *     def get_sentence(self, int i):             # <<<<<<<<<<<<<<
 *         cdef CoreferenceSentence *sentence = self.thisptr.GetSentence(i)
 *         p_sentence = PCoreferenceSentence(allocate=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_20PCoreferenceDocument_9get_sentence(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11turboparser_20PCoreferenceDocument_9get_sentence(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sentence (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 400, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PCoreferenceDocument.get_sentence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_20PCoreferenceDocument_8get_sentence(((struct __pyx_obj_11turboparser_PCoreferenceDocument *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_20PCoreferenceDocument_8get_sentence(struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self, int __pyx_v_i) {
  CoreferenceSentence *__pyx_v_sentence;
  struct __pyx_obj_11turboparser_PCoreferenceSentence *__pyx_v_p_sentence = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_sentence", 0);

  /* "turbo_parser.pyx":401
 * 
 *     def get_sentence(self, int i):
 *         cdef CoreferenceSentence *sentence = self.thisptr.GetSentence(i)             # <<<<<<<<<<<<<<
 *         p_sentence = PCoreferenceSentence(allocate=False)
 *         p_sentence.thisptr = sentence
 */
  __pyx_v_sentence = __pyx_v_self->thisptr->GetSentence(__pyx_v_i);

  /* "turbo_parser.pyx":402
 *     def get_sentence(self, int i):
 *         cdef CoreferenceSentence *sentence = self.thisptr.GetSentence(i)
 *         p_sentence = PCoreferenceSentence(allocate=False)             # <<<<<<<<<<<<<<
 *         p_sentence.thisptr = sentence
 *         return p_sentence
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate, Py_False) < 0) __PYX_ERR(1, 402, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_11turboparser_PCoreferenceSentence), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_p_sentence = ((struct __pyx_obj_11turboparser_PCoreferenceSentence *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "turbo_parser.pyx":403
 *         cdef CoreferenceSentence *sentence = self.thisptr.GetSentence(i)
 *         p_sentence = PCoreferenceSentence(allocate=False)
 *         p_sentence.thisptr = sentence             # <<<<<<<<<<<<<<
 *         return p_sentence
 * 
 */
  __pyx_v_p_sentence->thisptr = __pyx_v_sentence;

  /* "turbo_parser.pyx":404
 *         p_sentence = PCoreferenceSentence(allocate=False)
 *         p_sentence.thisptr = sentence
 *         return p_sentence             # <<<<<<<<<<<<<<
 * 
 * cdef class PTurboTaggerWorker:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p_sentence));
  __pyx_r = ((PyObject *)__pyx_v_p_sentence);
  goto __pyx_L0;

  /* "turbo_parser.pyx":400
 *         self.thisptr.GetNumSentences()
 * 
 *     def get_sentence(self, int i):             # <<<<<<<<<<<<<<
 *         cdef CoreferenceSentence *sentence = self.thisptr.GetSentence(i)
 *         p_sentence = PCoreferenceSentence(allocate=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("turboparser.PCoreferenceDocument.get_sentence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p_sentence);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_20PCoreferenceDocument_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_20PCoreferenceDocument_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_20PCoreferenceDocument_10__reduce_cython__(((struct __pyx_obj_11turboparser_PCoreferenceDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_20PCoreferenceDocument_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PCoreferenceDocument.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_20PCoreferenceDocument_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_20PCoreferenceDocument_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_20PCoreferenceDocument_12__setstate_cython__(((struct __pyx_obj_11turboparser_PCoreferenceDocument *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_20PCoreferenceDocument_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PCoreferenceDocument *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PCoreferenceDocument.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":409
 *     cdef TurboTaggerWorker *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_18PTurboTaggerWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_18PTurboTaggerWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 409, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 409, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PTurboTaggerWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_18PTurboTaggerWorker___cinit__(((struct __pyx_obj_11turboparser_PTurboTaggerWorker *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_18PTurboTaggerWorker___cinit__(struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":410
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new TurboTaggerWorker()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 410, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":411
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboTaggerWorker()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 411, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":412
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new TurboTaggerWorker()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new TurboParserInterface::TurboTaggerWorker();

    /* "turbo_parser.pyx":411
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboTaggerWorker()
 * 
 */
  }

  /* "turbo_parser.pyx":409
 *     cdef TurboTaggerWorker *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboTaggerWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":414
 *             self.thisptr = new TurboTaggerWorker()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_18PTurboTaggerWorker_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_18PTurboTaggerWorker_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_18PTurboTaggerWorker_2__dealloc__(((struct __pyx_obj_11turboparser_PTurboTaggerWorker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_18PTurboTaggerWorker_2__dealloc__(struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":415
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":416
 *     def __dealloc__(self):
 *         if self.allocate:
 *           del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def load_tagger_model(self, file_model):
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":415
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":414
 *             self.thisptr = new TurboTaggerWorker()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":418
 *           del self.thisptr
 * 
 *     def load_tagger_model(self, file_model):             # <<<<<<<<<<<<<<
 *         self.thisptr.LoadTaggerModel(file_model)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_18PTurboTaggerWorker_5load_tagger_model(PyObject *__pyx_v_self, PyObject *__pyx_v_file_model); /*proto*/
static PyObject *__pyx_pw_11turboparser_18PTurboTaggerWorker_5load_tagger_model(PyObject *__pyx_v_self, PyObject *__pyx_v_file_model) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_tagger_model (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_18PTurboTaggerWorker_4load_tagger_model(((struct __pyx_obj_11turboparser_PTurboTaggerWorker *)__pyx_v_self), ((PyObject *)__pyx_v_file_model));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_18PTurboTaggerWorker_4load_tagger_model(struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self, PyObject *__pyx_v_file_model) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("load_tagger_model", 0);

  /* "turbo_parser.pyx":419
 * 
 *     def load_tagger_model(self, file_model):
 *         self.thisptr.LoadTaggerModel(file_model)             # <<<<<<<<<<<<<<
 * 
 *     def tag(self, file_test, file_prediction):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_model); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 419, __pyx_L1_error)
  __pyx_v_self->thisptr->LoadTaggerModel(__pyx_t_1);

  /* "turbo_parser.pyx":418
 *           del self.thisptr
 * 
 *     def load_tagger_model(self, file_model):             # <<<<<<<<<<<<<<
 *         self.thisptr.LoadTaggerModel(file_model)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboTaggerWorker.load_tagger_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":421
 *         self.thisptr.LoadTaggerModel(file_model)
 * 
 *     def tag(self, file_test, file_prediction):             # <<<<<<<<<<<<<<
 *         self.thisptr.Tag(file_test, file_prediction)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_18PTurboTaggerWorker_7tag(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_18PTurboTaggerWorker_7tag(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_test = 0;
  PyObject *__pyx_v_file_prediction = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tag (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_test,&__pyx_n_s_file_prediction,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_test)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_prediction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("tag", 1, 2, 2, 1); __PYX_ERR(1, 421, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tag") < 0)) __PYX_ERR(1, 421, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_file_test = values[0];
    __pyx_v_file_prediction = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tag", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 421, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PTurboTaggerWorker.tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_18PTurboTaggerWorker_6tag(((struct __pyx_obj_11turboparser_PTurboTaggerWorker *)__pyx_v_self), __pyx_v_file_test, __pyx_v_file_prediction);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_18PTurboTaggerWorker_6tag(struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self, PyObject *__pyx_v_file_test, PyObject *__pyx_v_file_prediction) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("tag", 0);

  /* "turbo_parser.pyx":422
 * 
 *     def tag(self, file_test, file_prediction):
 *         self.thisptr.Tag(file_test, file_prediction)             # <<<<<<<<<<<<<<
 * 
 *     def tag_sentence(self, sequence_instance):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_test); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 422, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_prediction); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 422, __pyx_L1_error)
  __pyx_v_self->thisptr->Tag(__pyx_t_1, __pyx_t_2);

  /* "turbo_parser.pyx":421
 *         self.thisptr.LoadTaggerModel(file_model)
 * 
 *     def tag(self, file_test, file_prediction):             # <<<<<<<<<<<<<<
 *         self.thisptr.Tag(file_test, file_prediction)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboTaggerWorker.tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":424
 *         self.thisptr.Tag(file_test, file_prediction)
 * 
 *     def tag_sentence(self, sequence_instance):             # <<<<<<<<<<<<<<
 *         self.thisptr.TagSentence((<PSequenceInstance>sequence_instance).thisptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_18PTurboTaggerWorker_9tag_sentence(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence_instance); /*proto*/
static PyObject *__pyx_pw_11turboparser_18PTurboTaggerWorker_9tag_sentence(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence_instance) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tag_sentence (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_18PTurboTaggerWorker_8tag_sentence(((struct __pyx_obj_11turboparser_PTurboTaggerWorker *)__pyx_v_self), ((PyObject *)__pyx_v_sequence_instance));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_18PTurboTaggerWorker_8tag_sentence(struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self, PyObject *__pyx_v_sequence_instance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tag_sentence", 0);

  /* "turbo_parser.pyx":425
 * 
 *     def tag_sentence(self, sequence_instance):
 *         self.thisptr.TagSentence((<PSequenceInstance>sequence_instance).thisptr)             # <<<<<<<<<<<<<<
 * 
 * cdef class PTurboMorphologicalTaggerWorker:
 */
  __pyx_v_self->thisptr->TagSentence(((struct __pyx_obj_11turboparser_PSequenceInstance *)__pyx_v_sequence_instance)->thisptr);

  /* "turbo_parser.pyx":424
 *         self.thisptr.Tag(file_test, file_prediction)
 * 
 *     def tag_sentence(self, sequence_instance):             # <<<<<<<<<<<<<<
 *         self.thisptr.TagSentence((<PSequenceInstance>sequence_instance).thisptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_18PTurboTaggerWorker_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_18PTurboTaggerWorker_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_18PTurboTaggerWorker_10__reduce_cython__(((struct __pyx_obj_11turboparser_PTurboTaggerWorker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_18PTurboTaggerWorker_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboTaggerWorker.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_18PTurboTaggerWorker_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_18PTurboTaggerWorker_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_18PTurboTaggerWorker_12__setstate_cython__(((struct __pyx_obj_11turboparser_PTurboTaggerWorker *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_18PTurboTaggerWorker_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboTaggerWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboTaggerWorker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":430
 *     cdef TurboMorphologicalTaggerWorker *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 430, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 430, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PTurboMorphologicalTaggerWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker___cinit__(((struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker___cinit__(struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":431
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new TurboMorphologicalTaggerWorker()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 431, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":432
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboMorphologicalTaggerWorker()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 432, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":433
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new TurboMorphologicalTaggerWorker()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new TurboParserInterface::TurboMorphologicalTaggerWorker();

    /* "turbo_parser.pyx":432
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboMorphologicalTaggerWorker()
 * 
 */
  }

  /* "turbo_parser.pyx":430
 *     cdef TurboMorphologicalTaggerWorker *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboMorphologicalTaggerWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":435
 *             self.thisptr = new TurboMorphologicalTaggerWorker()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_2__dealloc__(((struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_2__dealloc__(struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":436
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":437
 *     def __dealloc__(self):
 *         if self.allocate:
 *           del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def load_morphological_tagger_model(self, file_model):
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":436
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":435
 *             self.thisptr = new TurboMorphologicalTaggerWorker()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":439
 *           del self.thisptr
 * 
 *     def load_morphological_tagger_model(self, file_model):             # <<<<<<<<<<<<<<
 *         self.thisptr.LoadMorphologicalTaggerModel(file_model)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_5load_morphological_tagger_model(PyObject *__pyx_v_self, PyObject *__pyx_v_file_model); /*proto*/
static PyObject *__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_5load_morphological_tagger_model(PyObject *__pyx_v_self, PyObject *__pyx_v_file_model) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_morphological_tagger_model (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_4load_morphological_tagger_model(((struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *)__pyx_v_self), ((PyObject *)__pyx_v_file_model));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_4load_morphological_tagger_model(struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self, PyObject *__pyx_v_file_model) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("load_morphological_tagger_model", 0);

  /* "turbo_parser.pyx":440
 * 
 *     def load_morphological_tagger_model(self, file_model):
 *         self.thisptr.LoadMorphologicalTaggerModel(file_model)             # <<<<<<<<<<<<<<
 * 
 *     def tag(self, file_test, file_prediction):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_model); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 440, __pyx_L1_error)
  __pyx_v_self->thisptr->LoadMorphologicalTaggerModel(__pyx_t_1);

  /* "turbo_parser.pyx":439
 *           del self.thisptr
 * 
 *     def load_morphological_tagger_model(self, file_model):             # <<<<<<<<<<<<<<
 *         self.thisptr.LoadMorphologicalTaggerModel(file_model)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboMorphologicalTaggerWorker.load_morphological_tagger_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":442
 *         self.thisptr.LoadMorphologicalTaggerModel(file_model)
 * 
 *     def tag(self, file_test, file_prediction):             # <<<<<<<<<<<<<<
 *         self.thisptr.Tag(file_test, file_prediction)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_7tag(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_7tag(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_test = 0;
  PyObject *__pyx_v_file_prediction = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tag (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_test,&__pyx_n_s_file_prediction,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_test)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_prediction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("tag", 1, 2, 2, 1); __PYX_ERR(1, 442, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tag") < 0)) __PYX_ERR(1, 442, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_file_test = values[0];
    __pyx_v_file_prediction = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tag", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 442, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PTurboMorphologicalTaggerWorker.tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_6tag(((struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *)__pyx_v_self), __pyx_v_file_test, __pyx_v_file_prediction);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_6tag(struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self, PyObject *__pyx_v_file_test, PyObject *__pyx_v_file_prediction) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("tag", 0);

  /* "turbo_parser.pyx":443
 * 
 *     def tag(self, file_test, file_prediction):
 *         self.thisptr.Tag(file_test, file_prediction)             # <<<<<<<<<<<<<<
 * 
 *     def tag_sentence(self, sequence_instance):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_test); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 443, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_prediction); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 443, __pyx_L1_error)
  __pyx_v_self->thisptr->Tag(__pyx_t_1, __pyx_t_2);

  /* "turbo_parser.pyx":442
 *         self.thisptr.LoadMorphologicalTaggerModel(file_model)
 * 
 *     def tag(self, file_test, file_prediction):             # <<<<<<<<<<<<<<
 *         self.thisptr.Tag(file_test, file_prediction)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboMorphologicalTaggerWorker.tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":445
 *         self.thisptr.Tag(file_test, file_prediction)
 * 
 *     def tag_sentence(self, sequence_instance):             # <<<<<<<<<<<<<<
 *         self.thisptr.TagSentence( \
 *             (<PMorphologicalInstance>sequence_instance).thisptr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_9tag_sentence(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence_instance); /*proto*/
static PyObject *__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_9tag_sentence(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence_instance) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tag_sentence (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_8tag_sentence(((struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *)__pyx_v_self), ((PyObject *)__pyx_v_sequence_instance));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_8tag_sentence(struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self, PyObject *__pyx_v_sequence_instance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tag_sentence", 0);

  /* "turbo_parser.pyx":446
 * 
 *     def tag_sentence(self, sequence_instance):
 *         self.thisptr.TagSentence( \             # <<<<<<<<<<<<<<
 *             (<PMorphologicalInstance>sequence_instance).thisptr)
 * 
 */
  __pyx_v_self->thisptr->TagSentence(((struct __pyx_obj_11turboparser_PMorphologicalInstance *)__pyx_v_sequence_instance)->thisptr);

  /* "turbo_parser.pyx":445
 *         self.thisptr.Tag(file_test, file_prediction)
 * 
 *     def tag_sentence(self, sequence_instance):             # <<<<<<<<<<<<<<
 *         self.thisptr.TagSentence( \
 *             (<PMorphologicalInstance>sequence_instance).thisptr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_10__reduce_cython__(((struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboMorphologicalTaggerWorker.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_12__setstate_cython__(((struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_31PTurboMorphologicalTaggerWorker_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboMorphologicalTaggerWorker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":452
 *     cdef TurboEntityRecognizerWorker *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 452, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 452, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PTurboEntityRecognizerWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_28PTurboEntityRecognizerWorker___cinit__(((struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_28PTurboEntityRecognizerWorker___cinit__(struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":453
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new TurboEntityRecognizerWorker()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 453, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":454
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboEntityRecognizerWorker()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 454, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":455
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new TurboEntityRecognizerWorker()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new TurboParserInterface::TurboEntityRecognizerWorker();

    /* "turbo_parser.pyx":454
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboEntityRecognizerWorker()
 * 
 */
  }

  /* "turbo_parser.pyx":452
 *     cdef TurboEntityRecognizerWorker *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboEntityRecognizerWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":457
 *             self.thisptr = new TurboEntityRecognizerWorker()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_2__dealloc__(((struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_2__dealloc__(struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":458
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":459
 *     def __dealloc__(self):
 *         if self.allocate:
 *           del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def load_entity_recognizer_model(self, file_model):
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":458
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":457
 *             self.thisptr = new TurboEntityRecognizerWorker()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":461
 *           del self.thisptr
 * 
 *     def load_entity_recognizer_model(self, file_model):             # <<<<<<<<<<<<<<
 *         self.thisptr.LoadEntityRecognizerModel(file_model)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_5load_entity_recognizer_model(PyObject *__pyx_v_self, PyObject *__pyx_v_file_model); /*proto*/
static PyObject *__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_5load_entity_recognizer_model(PyObject *__pyx_v_self, PyObject *__pyx_v_file_model) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_entity_recognizer_model (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_4load_entity_recognizer_model(((struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *)__pyx_v_self), ((PyObject *)__pyx_v_file_model));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_4load_entity_recognizer_model(struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self, PyObject *__pyx_v_file_model) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("load_entity_recognizer_model", 0);

  /* "turbo_parser.pyx":462
 * 
 *     def load_entity_recognizer_model(self, file_model):
 *         self.thisptr.LoadEntityRecognizerModel(file_model)             # <<<<<<<<<<<<<<
 * 
 *     def tag(self, file_test, file_prediction):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_model); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 462, __pyx_L1_error)
  __pyx_v_self->thisptr->LoadEntityRecognizerModel(__pyx_t_1);

  /* "turbo_parser.pyx":461
 *           del self.thisptr
 * 
 *     def load_entity_recognizer_model(self, file_model):             # <<<<<<<<<<<<<<
 *         self.thisptr.LoadEntityRecognizerModel(file_model)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboEntityRecognizerWorker.load_entity_recognizer_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":464
 *         self.thisptr.LoadEntityRecognizerModel(file_model)
 * 
 *     def tag(self, file_test, file_prediction):             # <<<<<<<<<<<<<<
 *         self.thisptr.Tag(file_test, file_prediction)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_7tag(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_7tag(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_test = 0;
  PyObject *__pyx_v_file_prediction = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tag (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_test,&__pyx_n_s_file_prediction,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_test)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_prediction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("tag", 1, 2, 2, 1); __PYX_ERR(1, 464, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tag") < 0)) __PYX_ERR(1, 464, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_file_test = values[0];
    __pyx_v_file_prediction = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tag", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 464, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PTurboEntityRecognizerWorker.tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_6tag(((struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *)__pyx_v_self), __pyx_v_file_test, __pyx_v_file_prediction);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_6tag(struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self, PyObject *__pyx_v_file_test, PyObject *__pyx_v_file_prediction) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("tag", 0);

  /* "turbo_parser.pyx":465
 * 
 *     def tag(self, file_test, file_prediction):
 *         self.thisptr.Tag(file_test, file_prediction)             # <<<<<<<<<<<<<<
 * 
 *     def tag_sentence(self, entity_instance):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_test); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 465, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_prediction); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 465, __pyx_L1_error)
  __pyx_v_self->thisptr->Tag(__pyx_t_1, __pyx_t_2);

  /* "turbo_parser.pyx":464
 *         self.thisptr.LoadEntityRecognizerModel(file_model)
 * 
 *     def tag(self, file_test, file_prediction):             # <<<<<<<<<<<<<<
 *         self.thisptr.Tag(file_test, file_prediction)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboEntityRecognizerWorker.tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":467
 *         self.thisptr.Tag(file_test, file_prediction)
 * 
 *     def tag_sentence(self, entity_instance):             # <<<<<<<<<<<<<<
 *         self.thisptr.TagSentence((<PEntityInstance>entity_instance).thisptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_9tag_sentence(PyObject *__pyx_v_self, PyObject *__pyx_v_entity_instance); /*proto*/
static PyObject *__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_9tag_sentence(PyObject *__pyx_v_self, PyObject *__pyx_v_entity_instance) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tag_sentence (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_8tag_sentence(((struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *)__pyx_v_self), ((PyObject *)__pyx_v_entity_instance));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_8tag_sentence(struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self, PyObject *__pyx_v_entity_instance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tag_sentence", 0);

  /* "turbo_parser.pyx":468
 * 
 *     def tag_sentence(self, entity_instance):
 *         self.thisptr.TagSentence((<PEntityInstance>entity_instance).thisptr)             # <<<<<<<<<<<<<<
 * 
 * cdef class PTurboParserWorker:
 */
  __pyx_v_self->thisptr->TagSentence(((struct __pyx_obj_11turboparser_PEntityInstance *)__pyx_v_entity_instance)->thisptr);

  /* "turbo_parser.pyx":467
 *         self.thisptr.Tag(file_test, file_prediction)
 * 
 *     def tag_sentence(self, entity_instance):             # <<<<<<<<<<<<<<
 *         self.thisptr.TagSentence((<PEntityInstance>entity_instance).thisptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_10__reduce_cython__(((struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboEntityRecognizerWorker.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_12__setstate_cython__(((struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_28PTurboEntityRecognizerWorker_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboEntityRecognizerWorker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":473
 *     cdef TurboParserWorker *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_18PTurboParserWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_18PTurboParserWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 473, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 473, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PTurboParserWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_18PTurboParserWorker___cinit__(((struct __pyx_obj_11turboparser_PTurboParserWorker *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_18PTurboParserWorker___cinit__(struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":474
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new TurboParserWorker()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 474, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":475
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboParserWorker()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 475, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":476
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new TurboParserWorker()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new TurboParserInterface::TurboParserWorker();

    /* "turbo_parser.pyx":475
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboParserWorker()
 * 
 */
  }

  /* "turbo_parser.pyx":473
 *     cdef TurboParserWorker *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboParserWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":478
 *             self.thisptr = new TurboParserWorker()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_18PTurboParserWorker_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_18PTurboParserWorker_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_18PTurboParserWorker_2__dealloc__(((struct __pyx_obj_11turboparser_PTurboParserWorker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_18PTurboParserWorker_2__dealloc__(struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":479
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":480
 *     def __dealloc__(self):
 *         if self.allocate:
 *           del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def load_parser_model(self, file_model):
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":479
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":478
 *             self.thisptr = new TurboParserWorker()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":482
 *           del self.thisptr
 * 
 *     def load_parser_model(self, file_model):             # <<<<<<<<<<<<<<
 *         self.thisptr.LoadParserModel(file_model)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_18PTurboParserWorker_5load_parser_model(PyObject *__pyx_v_self, PyObject *__pyx_v_file_model); /*proto*/
static PyObject *__pyx_pw_11turboparser_18PTurboParserWorker_5load_parser_model(PyObject *__pyx_v_self, PyObject *__pyx_v_file_model) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_parser_model (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_18PTurboParserWorker_4load_parser_model(((struct __pyx_obj_11turboparser_PTurboParserWorker *)__pyx_v_self), ((PyObject *)__pyx_v_file_model));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_18PTurboParserWorker_4load_parser_model(struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self, PyObject *__pyx_v_file_model) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("load_parser_model", 0);

  /* "turbo_parser.pyx":483
 * 
 *     def load_parser_model(self, file_model):
 *         self.thisptr.LoadParserModel(file_model)             # <<<<<<<<<<<<<<
 * 
 *     def parse(self, file_test, file_prediction):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_model); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 483, __pyx_L1_error)
  __pyx_v_self->thisptr->LoadParserModel(__pyx_t_1);

  /* "turbo_parser.pyx":482
 *           del self.thisptr
 * 
 *     def load_parser_model(self, file_model):             # <<<<<<<<<<<<<<
 *         self.thisptr.LoadParserModel(file_model)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboParserWorker.load_parser_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":485
 *         self.thisptr.LoadParserModel(file_model)
 * 
 *     def parse(self, file_test, file_prediction):             # <<<<<<<<<<<<<<
 *         self.thisptr.Parse(file_test, file_prediction)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_18PTurboParserWorker_7parse(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_18PTurboParserWorker_7parse(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_test = 0;
  PyObject *__pyx_v_file_prediction = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_test,&__pyx_n_s_file_prediction,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_test)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_prediction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parse", 1, 2, 2, 1); __PYX_ERR(1, 485, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "parse") < 0)) __PYX_ERR(1, 485, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_file_test = values[0];
    __pyx_v_file_prediction = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parse", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 485, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PTurboParserWorker.parse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_18PTurboParserWorker_6parse(((struct __pyx_obj_11turboparser_PTurboParserWorker *)__pyx_v_self), __pyx_v_file_test, __pyx_v_file_prediction);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_18PTurboParserWorker_6parse(struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self, PyObject *__pyx_v_file_test, PyObject *__pyx_v_file_prediction) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("parse", 0);

  /* "turbo_parser.pyx":486
 * 
 *     def parse(self, file_test, file_prediction):
 *         self.thisptr.Parse(file_test, file_prediction)             # <<<<<<<<<<<<<<
 * 
 *     def parse_sentence(self, dependency_instance):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_test); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 486, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_prediction); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 486, __pyx_L1_error)
  __pyx_v_self->thisptr->Parse(__pyx_t_1, __pyx_t_2);

  /* "turbo_parser.pyx":485
 *         self.thisptr.LoadParserModel(file_model)
 * 
 *     def parse(self, file_test, file_prediction):             # <<<<<<<<<<<<<<
 *         self.thisptr.Parse(file_test, file_prediction)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboParserWorker.parse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":488
 *         self.thisptr.Parse(file_test, file_prediction)
 * 
 *     def parse_sentence(self, dependency_instance):             # <<<<<<<<<<<<<<
 *         self.thisptr.ParseSentence( \
 *             (<PDependencyInstance>dependency_instance).thisptr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_18PTurboParserWorker_9parse_sentence(PyObject *__pyx_v_self, PyObject *__pyx_v_dependency_instance); /*proto*/
static PyObject *__pyx_pw_11turboparser_18PTurboParserWorker_9parse_sentence(PyObject *__pyx_v_self, PyObject *__pyx_v_dependency_instance) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_sentence (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_18PTurboParserWorker_8parse_sentence(((struct __pyx_obj_11turboparser_PTurboParserWorker *)__pyx_v_self), ((PyObject *)__pyx_v_dependency_instance));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_18PTurboParserWorker_8parse_sentence(struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self, PyObject *__pyx_v_dependency_instance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_sentence", 0);

  /* "turbo_parser.pyx":489
 * 
 *     def parse_sentence(self, dependency_instance):
 *         self.thisptr.ParseSentence( \             # <<<<<<<<<<<<<<
 *             (<PDependencyInstance>dependency_instance).thisptr)
 * 
 */
  __pyx_v_self->thisptr->ParseSentence(((struct __pyx_obj_11turboparser_PDependencyInstance *)__pyx_v_dependency_instance)->thisptr);

  /* "turbo_parser.pyx":488
 *         self.thisptr.Parse(file_test, file_prediction)
 * 
 *     def parse_sentence(self, dependency_instance):             # <<<<<<<<<<<<<<
 *         self.thisptr.ParseSentence( \
 *             (<PDependencyInstance>dependency_instance).thisptr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_18PTurboParserWorker_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_18PTurboParserWorker_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_18PTurboParserWorker_10__reduce_cython__(((struct __pyx_obj_11turboparser_PTurboParserWorker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_18PTurboParserWorker_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboParserWorker.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_18PTurboParserWorker_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_18PTurboParserWorker_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_18PTurboParserWorker_12__setstate_cython__(((struct __pyx_obj_11turboparser_PTurboParserWorker *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_18PTurboParserWorker_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboParserWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboParserWorker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":495
 *     cdef TurboSemanticParserWorker *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_26PTurboSemanticParserWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_26PTurboSemanticParserWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 495, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 495, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PTurboSemanticParserWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_26PTurboSemanticParserWorker___cinit__(((struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_26PTurboSemanticParserWorker___cinit__(struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":496
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new TurboSemanticParserWorker()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 496, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":497
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboSemanticParserWorker()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 497, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":498
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new TurboSemanticParserWorker()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new TurboParserInterface::TurboSemanticParserWorker();

    /* "turbo_parser.pyx":497
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboSemanticParserWorker()
 * 
 */
  }

  /* "turbo_parser.pyx":495
 *     cdef TurboSemanticParserWorker *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboSemanticParserWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":500
 *             self.thisptr = new TurboSemanticParserWorker()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_26PTurboSemanticParserWorker_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_26PTurboSemanticParserWorker_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_26PTurboSemanticParserWorker_2__dealloc__(((struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_26PTurboSemanticParserWorker_2__dealloc__(struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":501
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":502
 *     def __dealloc__(self):
 *         if self.allocate:
 *           del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def load_semantic_parser_model(self, file_model):
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":501
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":500
 *             self.thisptr = new TurboSemanticParserWorker()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":504
 *           del self.thisptr
 * 
 *     def load_semantic_parser_model(self, file_model):             # <<<<<<<<<<<<<<
 *         self.thisptr.LoadSemanticParserModel(file_model)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_26PTurboSemanticParserWorker_5load_semantic_parser_model(PyObject *__pyx_v_self, PyObject *__pyx_v_file_model); /*proto*/
static PyObject *__pyx_pw_11turboparser_26PTurboSemanticParserWorker_5load_semantic_parser_model(PyObject *__pyx_v_self, PyObject *__pyx_v_file_model) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_semantic_parser_model (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_26PTurboSemanticParserWorker_4load_semantic_parser_model(((struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *)__pyx_v_self), ((PyObject *)__pyx_v_file_model));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_26PTurboSemanticParserWorker_4load_semantic_parser_model(struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self, PyObject *__pyx_v_file_model) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("load_semantic_parser_model", 0);

  /* "turbo_parser.pyx":505
 * 
 *     def load_semantic_parser_model(self, file_model):
 *         self.thisptr.LoadSemanticParserModel(file_model)             # <<<<<<<<<<<<<<
 * 
 *     def parse_semantic_dependencies(self, file_test, file_prediction):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_model); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 505, __pyx_L1_error)
  __pyx_v_self->thisptr->LoadSemanticParserModel(__pyx_t_1);

  /* "turbo_parser.pyx":504
 *           del self.thisptr
 * 
 *     def load_semantic_parser_model(self, file_model):             # <<<<<<<<<<<<<<
 *         self.thisptr.LoadSemanticParserModel(file_model)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboSemanticParserWorker.load_semantic_parser_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":507
 *         self.thisptr.LoadSemanticParserModel(file_model)
 * 
 *     def parse_semantic_dependencies(self, file_test, file_prediction):             # <<<<<<<<<<<<<<
 *         self.thisptr.ParseSemanticDependencies(file_test, file_prediction)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_26PTurboSemanticParserWorker_7parse_semantic_dependencies(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_26PTurboSemanticParserWorker_7parse_semantic_dependencies(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_test = 0;
  PyObject *__pyx_v_file_prediction = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_semantic_dependencies (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_test,&__pyx_n_s_file_prediction,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_test)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_prediction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("parse_semantic_dependencies", 1, 2, 2, 1); __PYX_ERR(1, 507, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "parse_semantic_dependencies") < 0)) __PYX_ERR(1, 507, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_file_test = values[0];
    __pyx_v_file_prediction = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parse_semantic_dependencies", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 507, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PTurboSemanticParserWorker.parse_semantic_dependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_26PTurboSemanticParserWorker_6parse_semantic_dependencies(((struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *)__pyx_v_self), __pyx_v_file_test, __pyx_v_file_prediction);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_26PTurboSemanticParserWorker_6parse_semantic_dependencies(struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self, PyObject *__pyx_v_file_test, PyObject *__pyx_v_file_prediction) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("parse_semantic_dependencies", 0);

  /* "turbo_parser.pyx":508
 * 
 *     def parse_semantic_dependencies(self, file_test, file_prediction):
 *         self.thisptr.ParseSemanticDependencies(file_test, file_prediction)             # <<<<<<<<<<<<<<
 * 
 *     def parse_semantic_dependencies_from_sentence(self, semantic_instance):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_test); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 508, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_prediction); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 508, __pyx_L1_error)
  __pyx_v_self->thisptr->ParseSemanticDependencies(__pyx_t_1, __pyx_t_2);

  /* "turbo_parser.pyx":507
 *         self.thisptr.LoadSemanticParserModel(file_model)
 * 
 *     def parse_semantic_dependencies(self, file_test, file_prediction):             # <<<<<<<<<<<<<<
 *         self.thisptr.ParseSemanticDependencies(file_test, file_prediction)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboSemanticParserWorker.parse_semantic_dependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":510
 *         self.thisptr.ParseSemanticDependencies(file_test, file_prediction)
 * 
 *     def parse_semantic_dependencies_from_sentence(self, semantic_instance):             # <<<<<<<<<<<<<<
 *         self.thisptr.ParseSemanticDependenciesFromSentence( \
 *             (<PSemanticInstance>semantic_instance).thisptr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_26PTurboSemanticParserWorker_9parse_semantic_dependencies_from_sentence(PyObject *__pyx_v_self, PyObject *__pyx_v_semantic_instance); /*proto*/
static PyObject *__pyx_pw_11turboparser_26PTurboSemanticParserWorker_9parse_semantic_dependencies_from_sentence(PyObject *__pyx_v_self, PyObject *__pyx_v_semantic_instance) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_semantic_dependencies_from_sentence (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_26PTurboSemanticParserWorker_8parse_semantic_dependencies_from_sentence(((struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *)__pyx_v_self), ((PyObject *)__pyx_v_semantic_instance));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_26PTurboSemanticParserWorker_8parse_semantic_dependencies_from_sentence(struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self, PyObject *__pyx_v_semantic_instance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_semantic_dependencies_from_sentence", 0);

  /* "turbo_parser.pyx":511
 * 
 *     def parse_semantic_dependencies_from_sentence(self, semantic_instance):
 *         self.thisptr.ParseSemanticDependenciesFromSentence( \             # <<<<<<<<<<<<<<
 *             (<PSemanticInstance>semantic_instance).thisptr)
 * 
 */
  __pyx_v_self->thisptr->ParseSemanticDependenciesFromSentence(((struct __pyx_obj_11turboparser_PSemanticInstance *)__pyx_v_semantic_instance)->thisptr);

  /* "turbo_parser.pyx":510
 *         self.thisptr.ParseSemanticDependencies(file_test, file_prediction)
 * 
 *     def parse_semantic_dependencies_from_sentence(self, semantic_instance):             # <<<<<<<<<<<<<<
 *         self.thisptr.ParseSemanticDependenciesFromSentence( \
 *             (<PSemanticInstance>semantic_instance).thisptr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_26PTurboSemanticParserWorker_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_26PTurboSemanticParserWorker_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_26PTurboSemanticParserWorker_10__reduce_cython__(((struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_26PTurboSemanticParserWorker_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboSemanticParserWorker.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_26PTurboSemanticParserWorker_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_26PTurboSemanticParserWorker_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_26PTurboSemanticParserWorker_12__setstate_cython__(((struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_26PTurboSemanticParserWorker_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboSemanticParserWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboSemanticParserWorker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":517
 *     cdef TurboCoreferenceResolverWorker *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 517, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 517, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PTurboCoreferenceResolverWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker___cinit__(((struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker___cinit__(struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "turbo_parser.pyx":518
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new TurboCoreferenceResolverWorker()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 518, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "turbo_parser.pyx":519
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboCoreferenceResolverWorker()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 519, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "turbo_parser.pyx":520
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new TurboCoreferenceResolverWorker()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new TurboParserInterface::TurboCoreferenceResolverWorker();

    /* "turbo_parser.pyx":519
 *     def __cinit__(self, allocate=False):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new TurboCoreferenceResolverWorker()
 * 
 */
  }

  /* "turbo_parser.pyx":517
 *     cdef TurboCoreferenceResolverWorker *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=False):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboCoreferenceResolverWorker.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":522
 *             self.thisptr = new TurboCoreferenceResolverWorker()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_2__dealloc__(((struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_2__dealloc__(struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "turbo_parser.pyx":523
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "turbo_parser.pyx":524
 *     def __dealloc__(self):
 *         if self.allocate:
 *           del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def load_coreference_resolver_model(self, file_model):
 */
    delete __pyx_v_self->thisptr;

    /* "turbo_parser.pyx":523
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *           del self.thisptr
 * 
 */
  }

  /* "turbo_parser.pyx":522
 *             self.thisptr = new TurboCoreferenceResolverWorker()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *           del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "turbo_parser.pyx":526
 *           del self.thisptr
 * 
 *     def load_coreference_resolver_model(self, file_model):             # <<<<<<<<<<<<<<
 *         self.thisptr.LoadCoreferenceResolverModel(file_model)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_5load_coreference_resolver_model(PyObject *__pyx_v_self, PyObject *__pyx_v_file_model); /*proto*/
static PyObject *__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_5load_coreference_resolver_model(PyObject *__pyx_v_self, PyObject *__pyx_v_file_model) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_coreference_resolver_model (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_4load_coreference_resolver_model(((struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *)__pyx_v_self), ((PyObject *)__pyx_v_file_model));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_4load_coreference_resolver_model(struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self, PyObject *__pyx_v_file_model) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("load_coreference_resolver_model", 0);

  /* "turbo_parser.pyx":527
 * 
 *     def load_coreference_resolver_model(self, file_model):
 *         self.thisptr.LoadCoreferenceResolverModel(file_model)             # <<<<<<<<<<<<<<
 * 
 *     def resolve_coreferences(self, file_test, file_prediction):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_model); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 527, __pyx_L1_error)
  __pyx_v_self->thisptr->LoadCoreferenceResolverModel(__pyx_t_1);

  /* "turbo_parser.pyx":526
 *           del self.thisptr
 * 
 *     def load_coreference_resolver_model(self, file_model):             # <<<<<<<<<<<<<<
 *         self.thisptr.LoadCoreferenceResolverModel(file_model)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboCoreferenceResolverWorker.load_coreference_resolver_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":529
 *         self.thisptr.LoadCoreferenceResolverModel(file_model)
 * 
 *     def resolve_coreferences(self, file_test, file_prediction):             # <<<<<<<<<<<<<<
 *         self.thisptr.ResolveCoreferences(file_test, file_prediction)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_7resolve_coreferences(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_7resolve_coreferences(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_test = 0;
  PyObject *__pyx_v_file_prediction = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resolve_coreferences (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_test,&__pyx_n_s_file_prediction,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_test)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_prediction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("resolve_coreferences", 1, 2, 2, 1); __PYX_ERR(1, 529, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "resolve_coreferences") < 0)) __PYX_ERR(1, 529, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_file_test = values[0];
    __pyx_v_file_prediction = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("resolve_coreferences", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 529, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("turboparser.PTurboCoreferenceResolverWorker.resolve_coreferences", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_6resolve_coreferences(((struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *)__pyx_v_self), __pyx_v_file_test, __pyx_v_file_prediction);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_6resolve_coreferences(struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self, PyObject *__pyx_v_file_test, PyObject *__pyx_v_file_prediction) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __Pyx_RefNannySetupContext("resolve_coreferences", 0);

  /* "turbo_parser.pyx":530
 * 
 *     def resolve_coreferences(self, file_test, file_prediction):
 *         self.thisptr.ResolveCoreferences(file_test, file_prediction)             # <<<<<<<<<<<<<<
 * 
 *     def resolve_coreferences_from_document(self, coreference_document):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_test); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 530, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_prediction); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 530, __pyx_L1_error)
  __pyx_v_self->thisptr->ResolveCoreferences(__pyx_t_1, __pyx_t_2);

  /* "turbo_parser.pyx":529
 *         self.thisptr.LoadCoreferenceResolverModel(file_model)
 * 
 *     def resolve_coreferences(self, file_test, file_prediction):             # <<<<<<<<<<<<<<
 *         self.thisptr.ResolveCoreferences(file_test, file_prediction)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("turboparser.PTurboCoreferenceResolverWorker.resolve_coreferences", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "turbo_parser.pyx":532
 *         self.thisptr.ResolveCoreferences(file_test, file_prediction)
 * 
 *     def resolve_coreferences_from_document(self, coreference_document):             # <<<<<<<<<<<<<<
 *         self.thisptr.ResolveCoreferencesFromDocument( \
 *             (<PCoreferenceDocument>coreference_document).thisptr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_9resolve_coreferences_from_document(PyObject *__pyx_v_self, PyObject *__pyx_v_coreference_document); /*proto*/
static PyObject *__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_9resolve_coreferences_from_document(PyObject *__pyx_v_self, PyObject *__pyx_v_coreference_document) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resolve_coreferences_from_document (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_8resolve_coreferences_from_document(((struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *)__pyx_v_self), ((PyObject *)__pyx_v_coreference_document));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_8resolve_coreferences_from_document(struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self, PyObject *__pyx_v_coreference_document) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resolve_coreferences_from_document", 0);

  /* "turbo_parser.pyx":533
 * 
 *     def resolve_coreferences_from_document(self, coreference_document):
 *         self.thisptr.ResolveCoreferencesFromDocument( \             # <<<<<<<<<<<<<<
 *             (<PCoreferenceDocument>coreference_document).thisptr)
 */
  __pyx_v_self->thisptr->ResolveCoreferencesFromDocument(((struct __pyx_obj_11turboparser_PCoreferenceDocument *)__pyx_v_coreference_document)->thisptr);

  /* "turbo_parser.pyx":532
 *         self.thisptr.ResolveCoreferences(file_test, file_prediction)
 * 
 *     def resolve_coreferences_from_document(self, coreference_document):             # <<<<<<<<<<<<<<
 *         self.thisptr.ResolveCoreferencesFromDocument( \
 *             (<PCoreferenceDocument>coreference_document).thisptr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_10__reduce_cython__(((struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboCoreferenceResolverWorker.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_12__setstate_cython__(((struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11turboparser_31PTurboCoreferenceResolverWorker_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("turboparser.PTurboCoreferenceResolverWorker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *__pyx_v_o) {
  std::vector<std::string>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_string", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::string)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::vector<std::string> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<std::string> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<std::string> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<std::string>  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<std::string> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((int)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::vector<int> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<int> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<int>  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_int(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<int> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_11turboparser_PTurboParser(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_12PTurboParser_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PTurboParser(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_12PTurboParser_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PTurboParser[] = {
  {"create_tagger", (PyCFunction)__pyx_pw_11turboparser_12PTurboParser_5create_tagger, METH_NOARGS, 0},
  {"create_morphological_tagger", (PyCFunction)__pyx_pw_11turboparser_12PTurboParser_7create_morphological_tagger, METH_NOARGS, 0},
  {"create_entity_recognizer", (PyCFunction)__pyx_pw_11turboparser_12PTurboParser_9create_entity_recognizer, METH_NOARGS, 0},
  {"create_parser", (PyCFunction)__pyx_pw_11turboparser_12PTurboParser_11create_parser, METH_NOARGS, 0},
  {"create_semantic_parser", (PyCFunction)__pyx_pw_11turboparser_12PTurboParser_13create_semantic_parser, METH_NOARGS, 0},
  {"create_coreference_resolver", (PyCFunction)__pyx_pw_11turboparser_12PTurboParser_15create_coreference_resolver, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_12PTurboParser_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_12PTurboParser_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PTurboParser = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PTurboParser", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PTurboParser), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PTurboParser, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PTurboParser, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PTurboParser, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PSequenceInstance(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_17PSequenceInstance_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PSequenceInstance(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_17PSequenceInstance_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PSequenceInstance[] = {
  {"initialize", (PyCFunction)__pyx_pw_11turboparser_17PSequenceInstance_5initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_tag", (PyCFunction)__pyx_pw_11turboparser_17PSequenceInstance_7get_tag, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_17PSequenceInstance_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_17PSequenceInstance_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PSequenceInstance = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PSequenceInstance", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PSequenceInstance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PSequenceInstance, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PSequenceInstance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PSequenceInstance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PMorphologicalInstance(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_22PMorphologicalInstance_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PMorphologicalInstance(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_22PMorphologicalInstance_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PMorphologicalInstance[] = {
  {"initialize", (PyCFunction)__pyx_pw_11turboparser_22PMorphologicalInstance_5initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_tag", (PyCFunction)__pyx_pw_11turboparser_22PMorphologicalInstance_7get_tag, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_22PMorphologicalInstance_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_22PMorphologicalInstance_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PMorphologicalInstance = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PMorphologicalInstance", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PMorphologicalInstance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PMorphologicalInstance, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PMorphologicalInstance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PMorphologicalInstance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PEntityInstance(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_15PEntityInstance_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PEntityInstance(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_15PEntityInstance_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PEntityInstance[] = {
  {"initialize", (PyCFunction)__pyx_pw_11turboparser_15PEntityInstance_5initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_tag", (PyCFunction)__pyx_pw_11turboparser_15PEntityInstance_7get_tag, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_15PEntityInstance_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_15PEntityInstance_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PEntityInstance = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PEntityInstance", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PEntityInstance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PEntityInstance, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PEntityInstance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PEntityInstance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PDependencyInstance(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_19PDependencyInstance_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PDependencyInstance(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_19PDependencyInstance_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PDependencyInstance[] = {
  {"initialize", (PyCFunction)__pyx_pw_11turboparser_19PDependencyInstance_5initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_head", (PyCFunction)__pyx_pw_11turboparser_19PDependencyInstance_7get_head, METH_O, 0},
  {"get_dependency_relation", (PyCFunction)__pyx_pw_11turboparser_19PDependencyInstance_9get_dependency_relation, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_19PDependencyInstance_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_19PDependencyInstance_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PDependencyInstance = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PDependencyInstance", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PDependencyInstance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PDependencyInstance, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PDependencyInstance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PDependencyInstance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PSemanticInstance(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_17PSemanticInstance_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PSemanticInstance(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_17PSemanticInstance_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PSemanticInstance[] = {
  {"initialize", (PyCFunction)__pyx_pw_11turboparser_17PSemanticInstance_5initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_num_predicates", (PyCFunction)__pyx_pw_11turboparser_17PSemanticInstance_7get_num_predicates, METH_NOARGS, 0},
  {"get_predicate_name", (PyCFunction)__pyx_pw_11turboparser_17PSemanticInstance_9get_predicate_name, METH_O, 0},
  {"get_predicate_index", (PyCFunction)__pyx_pw_11turboparser_17PSemanticInstance_11get_predicate_index, METH_O, 0},
  {"get_num_arguments_predicate", (PyCFunction)__pyx_pw_11turboparser_17PSemanticInstance_13get_num_arguments_predicate, METH_O, 0},
  {"get_argument_role", (PyCFunction)__pyx_pw_11turboparser_17PSemanticInstance_15get_argument_role, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_argument_index", (PyCFunction)__pyx_pw_11turboparser_17PSemanticInstance_17get_argument_index, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_17PSemanticInstance_19__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_17PSemanticInstance_21__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PSemanticInstance = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PSemanticInstance", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PSemanticInstance), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PSemanticInstance, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PSemanticInstance, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PSemanticInstance, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PNamedSpan(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_10PNamedSpan_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PNamedSpan(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_10PNamedSpan_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PNamedSpan[] = {
  {"start", (PyCFunction)__pyx_pw_11turboparser_10PNamedSpan_5start, METH_NOARGS, 0},
  {"end", (PyCFunction)__pyx_pw_11turboparser_10PNamedSpan_7end, METH_NOARGS, 0},
  {"name", (PyCFunction)__pyx_pw_11turboparser_10PNamedSpan_9name, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_10PNamedSpan_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_10PNamedSpan_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PNamedSpan = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PNamedSpan", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PNamedSpan), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PNamedSpan, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PNamedSpan, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PNamedSpan, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PEntitySpan(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_11turboparser_PNamedSpan(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_11PEntitySpan_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_11turboparser_PEntitySpan[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_11PEntitySpan_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_11PEntitySpan_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PEntitySpan = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PEntitySpan", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PEntitySpan), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PNamedSpan, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PEntitySpan, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PEntitySpan, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PCoreferenceSentence(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_20PCoreferenceSentence_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PCoreferenceSentence(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_20PCoreferenceSentence_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PCoreferenceSentence[] = {
  {"initialize", (PyCFunction)__pyx_pw_11turboparser_20PCoreferenceSentence_5initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_coreference_spans", (PyCFunction)__pyx_pw_11turboparser_20PCoreferenceSentence_7get_coreference_spans, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_20PCoreferenceSentence_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_20PCoreferenceSentence_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PCoreferenceSentence = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PCoreferenceSentence", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PCoreferenceSentence), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PCoreferenceSentence, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PCoreferenceSentence, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PCoreferenceSentence, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PCoreferenceDocument(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_20PCoreferenceDocument_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PCoreferenceDocument(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_20PCoreferenceDocument_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PCoreferenceDocument[] = {
  {"initialize", (PyCFunction)__pyx_pw_11turboparser_20PCoreferenceDocument_5initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_num_sentences", (PyCFunction)__pyx_pw_11turboparser_20PCoreferenceDocument_7get_num_sentences, METH_NOARGS, 0},
  {"get_sentence", (PyCFunction)__pyx_pw_11turboparser_20PCoreferenceDocument_9get_sentence, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_20PCoreferenceDocument_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_20PCoreferenceDocument_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PCoreferenceDocument = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PCoreferenceDocument", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PCoreferenceDocument), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PCoreferenceDocument, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PCoreferenceDocument, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PCoreferenceDocument, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PTurboTaggerWorker(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_18PTurboTaggerWorker_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PTurboTaggerWorker(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_18PTurboTaggerWorker_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PTurboTaggerWorker[] = {
  {"load_tagger_model", (PyCFunction)__pyx_pw_11turboparser_18PTurboTaggerWorker_5load_tagger_model, METH_O, 0},
  {"tag", (PyCFunction)__pyx_pw_11turboparser_18PTurboTaggerWorker_7tag, METH_VARARGS|METH_KEYWORDS, 0},
  {"tag_sentence", (PyCFunction)__pyx_pw_11turboparser_18PTurboTaggerWorker_9tag_sentence, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_18PTurboTaggerWorker_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_18PTurboTaggerWorker_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PTurboTaggerWorker = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PTurboTaggerWorker", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PTurboTaggerWorker), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PTurboTaggerWorker, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PTurboTaggerWorker, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PTurboTaggerWorker, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PTurboMorphologicalTaggerWorker(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PTurboMorphologicalTaggerWorker(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PTurboMorphologicalTaggerWorker[] = {
  {"load_morphological_tagger_model", (PyCFunction)__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_5load_morphological_tagger_model, METH_O, 0},
  {"tag", (PyCFunction)__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_7tag, METH_VARARGS|METH_KEYWORDS, 0},
  {"tag_sentence", (PyCFunction)__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_9tag_sentence, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_31PTurboMorphologicalTaggerWorker_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PTurboMorphologicalTaggerWorker = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PTurboMorphologicalTaggerWorker", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PTurboMorphologicalTaggerWorker), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PTurboMorphologicalTaggerWorker, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PTurboMorphologicalTaggerWorker, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PTurboMorphologicalTaggerWorker, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PTurboEntityRecognizerWorker(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PTurboEntityRecognizerWorker(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PTurboEntityRecognizerWorker[] = {
  {"load_entity_recognizer_model", (PyCFunction)__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_5load_entity_recognizer_model, METH_O, 0},
  {"tag", (PyCFunction)__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_7tag, METH_VARARGS|METH_KEYWORDS, 0},
  {"tag_sentence", (PyCFunction)__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_9tag_sentence, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_28PTurboEntityRecognizerWorker_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PTurboEntityRecognizerWorker = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PTurboEntityRecognizerWorker", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PTurboEntityRecognizerWorker), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PTurboEntityRecognizerWorker, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PTurboEntityRecognizerWorker, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PTurboEntityRecognizerWorker, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PTurboParserWorker(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_18PTurboParserWorker_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PTurboParserWorker(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_18PTurboParserWorker_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PTurboParserWorker[] = {
  {"load_parser_model", (PyCFunction)__pyx_pw_11turboparser_18PTurboParserWorker_5load_parser_model, METH_O, 0},
  {"parse", (PyCFunction)__pyx_pw_11turboparser_18PTurboParserWorker_7parse, METH_VARARGS|METH_KEYWORDS, 0},
  {"parse_sentence", (PyCFunction)__pyx_pw_11turboparser_18PTurboParserWorker_9parse_sentence, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_18PTurboParserWorker_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_18PTurboParserWorker_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PTurboParserWorker = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PTurboParserWorker", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PTurboParserWorker), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PTurboParserWorker, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PTurboParserWorker, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PTurboParserWorker, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PTurboSemanticParserWorker(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_26PTurboSemanticParserWorker_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PTurboSemanticParserWorker(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_26PTurboSemanticParserWorker_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PTurboSemanticParserWorker[] = {
  {"load_semantic_parser_model", (PyCFunction)__pyx_pw_11turboparser_26PTurboSemanticParserWorker_5load_semantic_parser_model, METH_O, 0},
  {"parse_semantic_dependencies", (PyCFunction)__pyx_pw_11turboparser_26PTurboSemanticParserWorker_7parse_semantic_dependencies, METH_VARARGS|METH_KEYWORDS, 0},
  {"parse_semantic_dependencies_from_sentence", (PyCFunction)__pyx_pw_11turboparser_26PTurboSemanticParserWorker_9parse_semantic_dependencies_from_sentence, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_26PTurboSemanticParserWorker_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_26PTurboSemanticParserWorker_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PTurboSemanticParserWorker = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PTurboSemanticParserWorker", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PTurboSemanticParserWorker), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PTurboSemanticParserWorker, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PTurboSemanticParserWorker, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PTurboSemanticParserWorker, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_11turboparser_PTurboCoreferenceResolverWorker(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11turboparser_PTurboCoreferenceResolverWorker(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11turboparser_PTurboCoreferenceResolverWorker[] = {
  {"load_coreference_resolver_model", (PyCFunction)__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_5load_coreference_resolver_model, METH_O, 0},
  {"resolve_coreferences", (PyCFunction)__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_7resolve_coreferences, METH_VARARGS|METH_KEYWORDS, 0},
  {"resolve_coreferences_from_document", (PyCFunction)__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_9resolve_coreferences_from_document, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11turboparser_31PTurboCoreferenceResolverWorker_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11turboparser_PTurboCoreferenceResolverWorker = {
  PyVarObject_HEAD_INIT(0, 0)
  "turboparser.PTurboCoreferenceResolverWorker", /*tp_name*/
  sizeof(struct __pyx_obj_11turboparser_PTurboCoreferenceResolverWorker), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11turboparser_PTurboCoreferenceResolverWorker, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11turboparser_PTurboCoreferenceResolverWorker, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11turboparser_PTurboCoreferenceResolverWorker, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_turboparser(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_turboparser},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "turboparser",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 0, 1, 0},
  {&__pyx_n_s_allocate, __pyx_k_allocate, sizeof(__pyx_k_allocate), 0, 0, 1, 1},
  {&__pyx_n_s_argument_indices, __pyx_k_argument_indices, sizeof(__pyx_k_argument_indices), 0, 0, 1, 1},
  {&__pyx_n_s_argument_roles, __pyx_k_argument_roles, sizeof(__pyx_k_argument_roles), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cpos, __pyx_k_cpos, sizeof(__pyx_k_cpos), 0, 0, 1, 1},
  {&__pyx_n_s_deprels, __pyx_k_deprels, sizeof(__pyx_k_deprels), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_feats, __pyx_k_feats, sizeof(__pyx_k_feats), 0, 0, 1, 1},
  {&__pyx_n_s_file_prediction, __pyx_k_file_prediction, sizeof(__pyx_k_file_prediction), 0, 0, 1, 1},
  {&__pyx_n_s_file_test, __pyx_k_file_test, sizeof(__pyx_k_file_test), 0, 0, 1, 1},
  {&__pyx_n_s_forms, __pyx_k_forms, sizeof(__pyx_k_forms), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_heads, __pyx_k_heads, sizeof(__pyx_k_heads), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_lemmas, __pyx_k_lemmas, sizeof(__pyx_k_lemmas), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_p_constituent_spans, __pyx_k_p_constituent_spans, sizeof(__pyx_k_p_constituent_spans), 0, 0, 1, 1},
  {&__pyx_n_s_p_coreference_spans, __pyx_k_p_coreference_spans, sizeof(__pyx_k_p_coreference_spans), 0, 0, 1, 1},
  {&__pyx_n_s_p_entity_spans, __pyx_k_p_entity_spans, sizeof(__pyx_k_p_entity_spans), 0, 0, 1, 1},
  {&__pyx_n_s_p_sentences, __pyx_k_p_sentences, sizeof(__pyx_k_p_sentences), 0, 0, 1, 1},
  {&__pyx_n_s_part_number, __pyx_k_part_number, sizeof(__pyx_k_part_number), 0, 0, 1, 1},
  {&__pyx_n_s_pdb, __pyx_k_pdb, sizeof(__pyx_k_pdb), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_predicate_indices, __pyx_k_predicate_indices, sizeof(__pyx_k_predicate_indices), 0, 0, 1, 1},
  {&__pyx_n_s_predicate_names, __pyx_k_predicate_names, sizeof(__pyx_k_predicate_names), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_speakers, __pyx_k_speakers, sizeof(__pyx_k_speakers), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_tags, __pyx_k_tags, sizeof(__pyx_k_tags), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initturboparser(void); /*proto*/
PyMODINIT_FUNC initturboparser(void)
#else
PyMODINIT_FUNC PyInit_turboparser(void); /*proto*/
PyMODINIT_FUNC PyInit_turboparser(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_turboparser(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #endif
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_turboparser(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("turboparser", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_turboparser) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "turboparser")) {
      if (unlikely(PyDict_SetItemString(modules, "turboparser", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_11turboparser_PTurboParser) < 0) __PYX_ERR(1, 137, __pyx_L1_error)
  __pyx_type_11turboparser_PTurboParser.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PTurboParser", (PyObject *)&__pyx_type_11turboparser_PTurboParser) < 0) __PYX_ERR(1, 137, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PTurboParser) < 0) __PYX_ERR(1, 137, __pyx_L1_error)
  __pyx_ptype_11turboparser_PTurboParser = &__pyx_type_11turboparser_PTurboParser;
  if (PyType_Ready(&__pyx_type_11turboparser_PSequenceInstance) < 0) __PYX_ERR(1, 179, __pyx_L1_error)
  __pyx_type_11turboparser_PSequenceInstance.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PSequenceInstance", (PyObject *)&__pyx_type_11turboparser_PSequenceInstance) < 0) __PYX_ERR(1, 179, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PSequenceInstance) < 0) __PYX_ERR(1, 179, __pyx_L1_error)
  __pyx_ptype_11turboparser_PSequenceInstance = &__pyx_type_11turboparser_PSequenceInstance;
  if (PyType_Ready(&__pyx_type_11turboparser_PMorphologicalInstance) < 0) __PYX_ERR(1, 197, __pyx_L1_error)
  __pyx_type_11turboparser_PMorphologicalInstance.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PMorphologicalInstance", (PyObject *)&__pyx_type_11turboparser_PMorphologicalInstance) < 0) __PYX_ERR(1, 197, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PMorphologicalInstance) < 0) __PYX_ERR(1, 197, __pyx_L1_error)
  __pyx_ptype_11turboparser_PMorphologicalInstance = &__pyx_type_11turboparser_PMorphologicalInstance;
  if (PyType_Ready(&__pyx_type_11turboparser_PEntityInstance) < 0) __PYX_ERR(1, 216, __pyx_L1_error)
  __pyx_type_11turboparser_PEntityInstance.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PEntityInstance", (PyObject *)&__pyx_type_11turboparser_PEntityInstance) < 0) __PYX_ERR(1, 216, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PEntityInstance) < 0) __PYX_ERR(1, 216, __pyx_L1_error)
  __pyx_ptype_11turboparser_PEntityInstance = &__pyx_type_11turboparser_PEntityInstance;
  if (PyType_Ready(&__pyx_type_11turboparser_PDependencyInstance) < 0) __PYX_ERR(1, 235, __pyx_L1_error)
  __pyx_type_11turboparser_PDependencyInstance.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PDependencyInstance", (PyObject *)&__pyx_type_11turboparser_PDependencyInstance) < 0) __PYX_ERR(1, 235, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PDependencyInstance) < 0) __PYX_ERR(1, 235, __pyx_L1_error)
  __pyx_ptype_11turboparser_PDependencyInstance = &__pyx_type_11turboparser_PDependencyInstance;
  if (PyType_Ready(&__pyx_type_11turboparser_PSemanticInstance) < 0) __PYX_ERR(1, 259, __pyx_L1_error)
  __pyx_type_11turboparser_PSemanticInstance.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PSemanticInstance", (PyObject *)&__pyx_type_11turboparser_PSemanticInstance) < 0) __PYX_ERR(1, 259, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PSemanticInstance) < 0) __PYX_ERR(1, 259, __pyx_L1_error)
  __pyx_ptype_11turboparser_PSemanticInstance = &__pyx_type_11turboparser_PSemanticInstance;
  if (PyType_Ready(&__pyx_type_11turboparser_PNamedSpan) < 0) __PYX_ERR(1, 302, __pyx_L1_error)
  __pyx_type_11turboparser_PNamedSpan.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PNamedSpan", (PyObject *)&__pyx_type_11turboparser_PNamedSpan) < 0) __PYX_ERR(1, 302, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PNamedSpan) < 0) __PYX_ERR(1, 302, __pyx_L1_error)
  __pyx_ptype_11turboparser_PNamedSpan = &__pyx_type_11turboparser_PNamedSpan;
  __pyx_type_11turboparser_PEntitySpan.tp_base = __pyx_ptype_11turboparser_PNamedSpan;
  if (PyType_Ready(&__pyx_type_11turboparser_PEntitySpan) < 0) __PYX_ERR(1, 323, __pyx_L1_error)
  __pyx_type_11turboparser_PEntitySpan.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PEntitySpan", (PyObject *)&__pyx_type_11turboparser_PEntitySpan) < 0) __PYX_ERR(1, 323, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PEntitySpan) < 0) __PYX_ERR(1, 323, __pyx_L1_error)
  __pyx_ptype_11turboparser_PEntitySpan = &__pyx_type_11turboparser_PEntitySpan;
  if (PyType_Ready(&__pyx_type_11turboparser_PCoreferenceSentence) < 0) __PYX_ERR(1, 329, __pyx_L1_error)
  __pyx_type_11turboparser_PCoreferenceSentence.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PCoreferenceSentence", (PyObject *)&__pyx_type_11turboparser_PCoreferenceSentence) < 0) __PYX_ERR(1, 329, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PCoreferenceSentence) < 0) __PYX_ERR(1, 329, __pyx_L1_error)
  __pyx_ptype_11turboparser_PCoreferenceSentence = &__pyx_type_11turboparser_PCoreferenceSentence;
  if (PyType_Ready(&__pyx_type_11turboparser_PCoreferenceDocument) < 0) __PYX_ERR(1, 378, __pyx_L1_error)
  __pyx_type_11turboparser_PCoreferenceDocument.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PCoreferenceDocument", (PyObject *)&__pyx_type_11turboparser_PCoreferenceDocument) < 0) __PYX_ERR(1, 378, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PCoreferenceDocument) < 0) __PYX_ERR(1, 378, __pyx_L1_error)
  __pyx_ptype_11turboparser_PCoreferenceDocument = &__pyx_type_11turboparser_PCoreferenceDocument;
  if (PyType_Ready(&__pyx_type_11turboparser_PTurboTaggerWorker) < 0) __PYX_ERR(1, 406, __pyx_L1_error)
  __pyx_type_11turboparser_PTurboTaggerWorker.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PTurboTaggerWorker", (PyObject *)&__pyx_type_11turboparser_PTurboTaggerWorker) < 0) __PYX_ERR(1, 406, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PTurboTaggerWorker) < 0) __PYX_ERR(1, 406, __pyx_L1_error)
  __pyx_ptype_11turboparser_PTurboTaggerWorker = &__pyx_type_11turboparser_PTurboTaggerWorker;
  if (PyType_Ready(&__pyx_type_11turboparser_PTurboMorphologicalTaggerWorker) < 0) __PYX_ERR(1, 427, __pyx_L1_error)
  __pyx_type_11turboparser_PTurboMorphologicalTaggerWorker.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PTurboMorphologicalTaggerWorker", (PyObject *)&__pyx_type_11turboparser_PTurboMorphologicalTaggerWorker) < 0) __PYX_ERR(1, 427, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PTurboMorphologicalTaggerWorker) < 0) __PYX_ERR(1, 427, __pyx_L1_error)
  __pyx_ptype_11turboparser_PTurboMorphologicalTaggerWorker = &__pyx_type_11turboparser_PTurboMorphologicalTaggerWorker;
  if (PyType_Ready(&__pyx_type_11turboparser_PTurboEntityRecognizerWorker) < 0) __PYX_ERR(1, 449, __pyx_L1_error)
  __pyx_type_11turboparser_PTurboEntityRecognizerWorker.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PTurboEntityRecognizerWorker", (PyObject *)&__pyx_type_11turboparser_PTurboEntityRecognizerWorker) < 0) __PYX_ERR(1, 449, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PTurboEntityRecognizerWorker) < 0) __PYX_ERR(1, 449, __pyx_L1_error)
  __pyx_ptype_11turboparser_PTurboEntityRecognizerWorker = &__pyx_type_11turboparser_PTurboEntityRecognizerWorker;
  if (PyType_Ready(&__pyx_type_11turboparser_PTurboParserWorker) < 0) __PYX_ERR(1, 470, __pyx_L1_error)
  __pyx_type_11turboparser_PTurboParserWorker.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PTurboParserWorker", (PyObject *)&__pyx_type_11turboparser_PTurboParserWorker) < 0) __PYX_ERR(1, 470, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PTurboParserWorker) < 0) __PYX_ERR(1, 470, __pyx_L1_error)
  __pyx_ptype_11turboparser_PTurboParserWorker = &__pyx_type_11turboparser_PTurboParserWorker;
  if (PyType_Ready(&__pyx_type_11turboparser_PTurboSemanticParserWorker) < 0) __PYX_ERR(1, 492, __pyx_L1_error)
  __pyx_type_11turboparser_PTurboSemanticParserWorker.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PTurboSemanticParserWorker", (PyObject *)&__pyx_type_11turboparser_PTurboSemanticParserWorker) < 0) __PYX_ERR(1, 492, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PTurboSemanticParserWorker) < 0) __PYX_ERR(1, 492, __pyx_L1_error)
  __pyx_ptype_11turboparser_PTurboSemanticParserWorker = &__pyx_type_11turboparser_PTurboSemanticParserWorker;
  if (PyType_Ready(&__pyx_type_11turboparser_PTurboCoreferenceResolverWorker) < 0) __PYX_ERR(1, 514, __pyx_L1_error)
  __pyx_type_11turboparser_PTurboCoreferenceResolverWorker.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PTurboCoreferenceResolverWorker", (PyObject *)&__pyx_type_11turboparser_PTurboCoreferenceResolverWorker) < 0) __PYX_ERR(1, 514, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11turboparser_PTurboCoreferenceResolverWorker) < 0) __PYX_ERR(1, 514, __pyx_L1_error)
  __pyx_ptype_11turboparser_PTurboCoreferenceResolverWorker = &__pyx_type_11turboparser_PTurboCoreferenceResolverWorker;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "turbo_parser.pyx":5
 * from libcpp cimport bool
 * 
 * import pdb             # <<<<<<<<<<<<<<
 * 
 * # Get the classes from the c++ headers.
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pdb, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdb, __pyx_t_1) < 0) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "turbo_parser.pyx":1
 * from libcpp.string cimport string             # <<<<<<<<<<<<<<
 * from libcpp.vector cimport vector
 * from libcpp cimport bool
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init turboparser", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init turboparser");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
