2009-11-26 TurboParser 0.1 afm@cs.cmu.edu
  Initial implementation, based on a C++ implementation of MSTParser and
  using the commercial solver ILOG CPLEX.

2012-09-18 TurboParser 2.0 afm@cs.cmu.edu
  Major refactoring:
  * Implementation of TurboTagger, a sequence model for POS tagging.
  * TurboParser now outputs labeled dependencies.
  * Dictionary and distance pruning to achieve fast decoding.
  * Replaced ILOG CPLEX by the free library AD3.
  * Now use free libraries glog and gflags for easy logging and commandline
  flag processing.

2012-10-10 TurboParser 2.0.1 afm@cs.cmu.edu
  Fixed initialization of STL vectors, which was causing problems in some
  compilers. Replaced the AD3 package by a newer version that also addresses
  this issue (thanks to Atro Voutilainen and Denis Maua for reporting this).

2012-12-06 TurboParser 2.0.2 afm@cs.cmu.edu
  Fixed a bug that where causing some of the predicted parses not to be
  valid trees. Now there is a final projection step that ensures that all
  output parses are trees.

2013-05-23 TurboParser 2.1.0 afm@cs.cmu.edu
  New release with some additional features:
  * Introduced third-order parts (as described in our ACL 2013 short paper).
  * Windows-compatible (tested under MSVC; thanks to Afonso Mendes).
  * TurboTagger is now faster.

2014-06-26 TurboParser 2.2.0 afm@cs.cmu.edu
  New release with some additional features:
  * Implemented a Python wrapper using Cython.
  * Added a semantic parser, TurboSemanticParser (as described in our SemEval
  2014 paper)
  * Added a tokenizer for Portuguese.

2015-11-06 TurboParser 2.3.0 afm@cs.cmu.edu
  New release with some additional features:
  * Added a named entity recognizer, TurboEntityRecognizer, based on the
  Illinois Entity Tagger.
  * Added a coreference resolver, TurboCoreferenceResolver, based on the
  Berkeley Coreference Resolution System.
  * Implemented a constituent parser by reducing that problem to dependency
  parser followed by unary recovery (as described in our ACL 2015 paper).
  * As a by-product, implemented an external dependency labeler,
  TurboDependencyLabeler, to be applied optionally after the dependency parser.
  * Compatible with C++0x.
  * Windows-compatible (tested under MSVC; thanks to David Nogueira).
